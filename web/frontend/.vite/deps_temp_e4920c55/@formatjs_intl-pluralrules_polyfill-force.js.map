{
  "version": 3,
  "sources": ["../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/CanonicalizeLocaleList.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/CanonicalizeTimeZoneName.js", "../../../../node_modules/decimal.js/decimal.mjs", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/constants.js", "../../../../node_modules/@formatjs/fast-memoize/lib/index.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/utils.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/262.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/CoerceOptionsToObject.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/DefaultNumberOption.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/GetNumberOption.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/GetOption.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/GetOptionsObject.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/GetStringOrBooleanOption.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/IsSanctionedSimpleUnitIdentifier.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/IsValidTimeZoneName.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/IsWellFormedCurrencyCode.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/IsWellFormedUnitIdentifier.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ApplyUnsignedRoundingMode.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/CollapseNumberRange.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ComputeExponentForMagnitude.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/GetUnsignedRoundingMode.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawFixed.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawPrecision.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericToString.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ComputeExponent.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/CurrencyDigits.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/regex.generated.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/digit-mapping.generated.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/format_to_parts.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatApproximately.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberPattern.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumeric.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberRangePattern.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericRange.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericRangeToParts.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericToParts.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/SetNumberFormatDigitOptions.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/SetNumberFormatUnitOptions.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/InitializeNumberFormat.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/SupportedLocales.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/data.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/date-time.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/displaynames.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/list.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/number.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/plural-rules.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/types/relative-time.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/ToIntlMathematicalValue.js", "../../../../node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/lib/index.js", "../../../../node_modules/@formatjs/intl-pluralrules/abstract/InitializePluralRules.js", "../../../../node_modules/@formatjs/intl-pluralrules/abstract/GetOperands.js", "../../../../node_modules/@formatjs/intl-pluralrules/abstract/ResolvePlural.js", "../../../../node_modules/@formatjs/intl-pluralrules/get_internal_slots.js", "../../../../node_modules/@formatjs/intl-pluralrules/index.js", "../../../../node_modules/@formatjs/intl-pluralrules/polyfill-force.js"],
  "sourcesContent": ["/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist\n * @param locales\n */\nexport function CanonicalizeLocaleList(locales) {\n    // TODO\n    return Intl.getCanonicalLocales(locales);\n}\n", "/**\n * https://tc39.es/ecma402/#sec-canonicalizetimezonename\n * @param tz\n */\nexport function CanonicalizeTimeZoneName(tz, _a) {\n    var zoneNames = _a.zoneNames, uppercaseLinks = _a.uppercaseLinks;\n    var uppercasedTz = tz.toUpperCase();\n    var uppercasedZones = zoneNames.reduce(function (all, z) {\n        all[z.toUpperCase()] = z;\n        return all;\n    }, {});\n    var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];\n    if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {\n        return 'UTC';\n    }\n    return ianaTimeZone;\n}\n", "/*!\r\n *  decimal.js v10.6.0\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  // See https://github.com/MikeMcl/decimal.js/pull/217\r\n  x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, -1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|bigint|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` (`n` is -1) and `min` (`n` is 1).\r\n */\r\nfunction maxOrMin(Ctor, args, n) {\r\n  var k, y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n\r\n    // NaN?\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    }\r\n\r\n    k = x.cmp(y);\r\n\r\n    if (k === n || k === 0 && x.s === n) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|bigint|Decimal} The y-coordinate.\r\n * x {number|string|bigint|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|bigint|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Infinity or NaN?\r\n      if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    if (t === 'string') {\r\n      if ((i = v.charCodeAt(0)) === 45) {  // minus sign\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        if (i === 43) v = v.slice(1);  // plus sign\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    if (t === 'bigint') {\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    throw Error(invalidArgument + v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|bigint|Decimal} The argument of the logarithm.\r\n * y {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, -1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The base.\r\n * y {number|string|bigint|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n", "import Decimal from 'decimal.js';\nexport var TEN = new Decimal(10);\nexport var ZERO = new Decimal(0);\nexport var NEGATIVE_ZERO = new Decimal(-0);\n", "//\n// Main\n//\nexport function memoize(fn, options) {\n    var cache = options && options.cache ? options.cache : cacheDefault;\n    var serializer = options && options.serializer ? options.serializer : serializerDefault;\n    var strategy = options && options.strategy ? options.strategy : strategyDefault;\n    return strategy(fn, {\n        cache: cache,\n        serializer: serializer,\n    });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n    return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\nfunction monadic(fn, cache, serializer, arg) {\n    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === 'undefined') {\n        computedValue = fn.call(this, arg);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n    var args = Array.prototype.slice.call(arguments, 3);\n    var cacheKey = serializer(args);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === 'undefined') {\n        computedValue = fn.apply(this, args);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n    return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n    var strategy = fn.length === 1 ? monadic : variadic;\n    return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n    return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n    return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n    return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nvar ObjectWithoutPrototypeCache = /** @class */ (function () {\n    function ObjectWithoutPrototypeCache() {\n        this.cache = Object.create(null);\n    }\n    ObjectWithoutPrototypeCache.prototype.get = function (key) {\n        return this.cache[key];\n    };\n    ObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n        this.cache[key] = value;\n    };\n    return ObjectWithoutPrototypeCache;\n}());\nvar cacheDefault = {\n    create: function create() {\n        return new ObjectWithoutPrototypeCache();\n    },\n};\nexport var strategies = {\n    variadic: strategyVariadic,\n    monadic: strategyMonadic,\n};\n", "import { __spreadArray } from \"tslib\";\nimport { memoize, strategies } from '@formatjs/fast-memoize';\nexport function repeat(s, times) {\n    if (typeof s.repeat === 'function') {\n        return s.repeat(times);\n    }\n    var arr = new Array(times);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = s;\n    }\n    return arr.join('');\n}\nexport function setInternalSlot(map, pl, field, value) {\n    if (!map.get(pl)) {\n        map.set(pl, Object.create(null));\n    }\n    var slots = map.get(pl);\n    slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n        var k = _a[_i];\n        setInternalSlot(map, pl, k, props[k]);\n    }\n}\nexport function getInternalSlot(map, pl, field) {\n    return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n    var fields = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        fields[_i - 2] = arguments[_i];\n    }\n    var slots = map.get(pl);\n    if (!slots) {\n        throw new TypeError(\"\".concat(pl, \" InternalSlot has not been initialized\"));\n    }\n    return fields.reduce(function (all, f) {\n        all[f] = slots[f];\n        return all;\n    }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n    return patternPart.type === 'literal';\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\nexport function defineProperty(target, name, _a) {\n    var value = _a.value;\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: value,\n    });\n}\n/**\n * 7.3.5 CreateDataProperty\n * @param target\n * @param name\n * @param value\n */\nexport function createDataProperty(target, name, value) {\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: value,\n    });\n}\nexport var UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;\nexport function invariant(condition, message, Err) {\n    if (Err === void 0) { Err = Error; }\n    if (!condition) {\n        throw new Err(message);\n    }\n}\nexport var createMemoizedNumberFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedDateTimeFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedPluralRules = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedLocale = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.Locale).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedListFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.ListFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\n", "import { Decimal } from 'decimal.js';\nimport { ZERO } from './constants';\nimport { invariant } from './utils';\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\nexport function ToString(o) {\n    // Only symbol is irregular...\n    if (typeof o === 'symbol') {\n        throw TypeError('Cannot convert a Symbol value to a string');\n    }\n    return String(o);\n}\n/**\n * https://tc39.es/ecma262/#sec-tonumber\n * @param val\n */\nexport function ToNumber(arg) {\n    if (typeof arg === 'number') {\n        return new Decimal(arg);\n    }\n    invariant(typeof arg !== 'bigint' && typeof arg !== 'symbol', 'BigInt and Symbol are not supported', TypeError);\n    if (arg === undefined) {\n        return new Decimal(NaN);\n    }\n    if (arg === null || arg === 0) {\n        return ZERO;\n    }\n    if (arg === true) {\n        return new Decimal(1);\n    }\n    if (typeof arg === 'string') {\n        try {\n            return new Decimal(arg);\n        }\n        catch (e) {\n            return new Decimal(NaN);\n        }\n    }\n    invariant(typeof arg === 'object', 'object expected', TypeError);\n    var primValue = ToPrimitive(arg, 'number');\n    invariant(typeof primValue !== 'object', 'object expected', TypeError);\n    return ToNumber(primValue);\n}\n/**\n * https://tc39.es/ecma262/#sec-tointeger\n * @param n\n */\nfunction ToInteger(n) {\n    var number = ToNumber(n);\n    if (number.isNaN() || number.isZero()) {\n        return ZERO;\n    }\n    if (number.isFinite()) {\n        return number;\n    }\n    var integer = number.abs().floor();\n    if (number.isNegative()) {\n        integer = integer.negated();\n    }\n    return integer;\n}\n/**\n * https://tc39.es/ecma262/#sec-timeclip\n * @param time\n */\nexport function TimeClip(time) {\n    if (!time.isFinite()) {\n        return new Decimal(NaN);\n    }\n    if (time.abs().greaterThan(8.64 * 1e15)) {\n        return new Decimal(NaN);\n    }\n    return ToInteger(time);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\nexport function ToObject(arg) {\n    if (arg == null) {\n        throw new TypeError('undefined/null cannot be converted to object');\n    }\n    return Object(arg);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue\n * @param x\n * @param y\n */\nexport function SameValue(x, y) {\n    if (Object.is) {\n        return Object.is(x, y);\n    }\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate\n * @param len\n */\nexport function ArrayCreate(len) {\n    return new Array(len);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty\n * @param o\n * @param prop\n */\nexport function HasOwnProperty(o, prop) {\n    return Object.prototype.hasOwnProperty.call(o, prop);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type\n * @param x\n */\nexport function Type(x) {\n    if (x === null) {\n        return 'Null';\n    }\n    if (typeof x === 'undefined') {\n        return 'Undefined';\n    }\n    if (typeof x === 'function' || typeof x === 'object') {\n        return 'Object';\n    }\n    if (typeof x === 'number') {\n        return 'Number';\n    }\n    if (typeof x === 'boolean') {\n        return 'Boolean';\n    }\n    if (typeof x === 'string') {\n        return 'String';\n    }\n    if (typeof x === 'symbol') {\n        return 'Symbol';\n    }\n    if (typeof x === 'bigint') {\n        return 'BigInt';\n    }\n}\nvar MS_PER_DAY = 86400000;\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo\n * @param x\n * @param y\n * @return k of the same sign as y\n */\nfunction mod(x, y) {\n    return x - Math.floor(x / y) * y;\n}\n/**\n * https://tc39.es/ecma262/#eqn-Day\n * @param t\n */\nexport function Day(t) {\n    return Math.floor(t / MS_PER_DAY);\n}\n/**\n * https://tc39.es/ecma262/#sec-week-day\n * @param t\n */\nexport function WeekDay(t) {\n    return mod(Day(t) + 4, 7);\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param y\n */\nexport function DayFromYear(y) {\n    return Date.UTC(y, 0) / MS_PER_DAY;\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param y\n */\nexport function TimeFromYear(y) {\n    return Date.UTC(y, 0);\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param t\n */\nexport function YearFromTime(t) {\n    return new Date(t).getUTCFullYear();\n}\nexport function DaysInYear(y) {\n    if (y % 4 !== 0) {\n        return 365;\n    }\n    if (y % 100 !== 0) {\n        return 366;\n    }\n    if (y % 400 !== 0) {\n        return 365;\n    }\n    return 366;\n}\nexport function DayWithinYear(t) {\n    return Day(t) - DayFromYear(YearFromTime(t));\n}\nexport function InLeapYear(t) {\n    return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;\n}\n/**\n * https://tc39.es/ecma262/#sec-month-number\n * @param t\n */\nexport function MonthFromTime(t) {\n    var dwy = DayWithinYear(t);\n    var leap = InLeapYear(t);\n    if (dwy >= 0 && dwy < 31) {\n        return 0;\n    }\n    if (dwy < 59 + leap) {\n        return 1;\n    }\n    if (dwy < 90 + leap) {\n        return 2;\n    }\n    if (dwy < 120 + leap) {\n        return 3;\n    }\n    if (dwy < 151 + leap) {\n        return 4;\n    }\n    if (dwy < 181 + leap) {\n        return 5;\n    }\n    if (dwy < 212 + leap) {\n        return 6;\n    }\n    if (dwy < 243 + leap) {\n        return 7;\n    }\n    if (dwy < 273 + leap) {\n        return 8;\n    }\n    if (dwy < 304 + leap) {\n        return 9;\n    }\n    if (dwy < 334 + leap) {\n        return 10;\n    }\n    if (dwy < 365 + leap) {\n        return 11;\n    }\n    throw new Error('Invalid time');\n}\nexport function DateFromTime(t) {\n    var dwy = DayWithinYear(t);\n    var mft = MonthFromTime(t);\n    var leap = InLeapYear(t);\n    if (mft === 0) {\n        return dwy + 1;\n    }\n    if (mft === 1) {\n        return dwy - 30;\n    }\n    if (mft === 2) {\n        return dwy - 58 - leap;\n    }\n    if (mft === 3) {\n        return dwy - 89 - leap;\n    }\n    if (mft === 4) {\n        return dwy - 119 - leap;\n    }\n    if (mft === 5) {\n        return dwy - 150 - leap;\n    }\n    if (mft === 6) {\n        return dwy - 180 - leap;\n    }\n    if (mft === 7) {\n        return dwy - 211 - leap;\n    }\n    if (mft === 8) {\n        return dwy - 242 - leap;\n    }\n    if (mft === 9) {\n        return dwy - 272 - leap;\n    }\n    if (mft === 10) {\n        return dwy - 303 - leap;\n    }\n    if (mft === 11) {\n        return dwy - 333 - leap;\n    }\n    throw new Error('Invalid time');\n}\nvar HOURS_PER_DAY = 24;\nvar MINUTES_PER_HOUR = 60;\nvar SECONDS_PER_MINUTE = 60;\nvar MS_PER_SECOND = 1e3;\nvar MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;\nvar MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;\nexport function HourFromTime(t) {\n    return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);\n}\nexport function MinFromTime(t) {\n    return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);\n}\nexport function SecFromTime(t) {\n    return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);\n}\nfunction IsCallable(fn) {\n    return typeof fn === 'function';\n}\n/**\n * The abstract operation OrdinaryHasInstance implements\n * the default algorithm for determining if an object O\n * inherits from the instance object inheritance path\n * provided by constructor C.\n * @param C class\n * @param O object\n * @param internalSlots internalSlots\n */\nexport function OrdinaryHasInstance(C, O, internalSlots) {\n    if (!IsCallable(C)) {\n        return false;\n    }\n    if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {\n        var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;\n        return O instanceof BC;\n    }\n    if (typeof O !== 'object') {\n        return false;\n    }\n    var P = C.prototype;\n    if (typeof P !== 'object') {\n        throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');\n    }\n    return Object.prototype.isPrototypeOf.call(P, O);\n}\nexport function msFromTime(t) {\n    return mod(t, MS_PER_SECOND);\n}\nfunction OrdinaryToPrimitive(O, hint) {\n    var methodNames;\n    if (hint === 'string') {\n        methodNames = ['toString', 'valueOf'];\n    }\n    else {\n        methodNames = ['valueOf', 'toString'];\n    }\n    for (var _i = 0, methodNames_1 = methodNames; _i < methodNames_1.length; _i++) {\n        var name_1 = methodNames_1[_i];\n        var method = O[name_1];\n        if (IsCallable(method)) {\n            var result = method.call(O);\n            if (typeof result !== 'object') {\n                return result;\n            }\n        }\n    }\n    throw new TypeError('Cannot convert object to primitive value');\n}\nexport function ToPrimitive(input, preferredType) {\n    if (typeof input === 'object' && input != null) {\n        var exoticToPrim = Symbol.toPrimitive in input ? input[Symbol.toPrimitive] : undefined;\n        var hint = void 0;\n        if (exoticToPrim !== undefined) {\n            if (preferredType === undefined) {\n                hint = 'default';\n            }\n            else if (preferredType === 'string') {\n                hint = 'string';\n            }\n            else {\n                invariant(preferredType === 'number', 'preferredType must be \"string\" or \"number\"');\n                hint = 'number';\n            }\n            var result = exoticToPrim.call(input, hint);\n            if (typeof result !== 'object') {\n                return result;\n            }\n            throw new TypeError('Cannot convert exotic object to primitive.');\n        }\n        if (preferredType === undefined) {\n            preferredType = 'number';\n        }\n        return OrdinaryToPrimitive(input, preferredType);\n    }\n    return input;\n}\n", "import { ToObject } from './262';\n/**\n * https://tc39.es/ecma402/#sec-coerceoptionstoobject\n * @param options\n * @returns\n */\nexport function CoerceOptionsToObject(options) {\n    if (typeof options === 'undefined') {\n        return Object.create(null);\n    }\n    return ToObject(options);\n}\n", "/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\nexport function DefaultNumberOption(inputVal, min, max, fallback) {\n    if (inputVal === undefined) {\n        // @ts-expect-error\n        return fallback;\n    }\n    var val = Number(inputVal);\n    if (isNaN(val) || val < min || val > max) {\n        throw new RangeError(\"\".concat(val, \" is outside of range [\").concat(min, \", \").concat(max, \"]\"));\n    }\n    return Math.floor(val);\n}\n", "/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\nimport { DefaultNumberOption } from './DefaultNumberOption';\nexport function GetNumberOption(options, property, minimum, maximum, fallback) {\n    var val = options[property];\n    return DefaultNumberOption(val, minimum, maximum, fallback);\n}\n", "import { ToString } from './262';\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\nexport function GetOption(opts, prop, type, values, fallback) {\n    if (typeof opts !== 'object') {\n        throw new TypeError('Options must be an object');\n    }\n    var value = opts[prop];\n    if (value !== undefined) {\n        if (type !== 'boolean' && type !== 'string') {\n            throw new TypeError('invalid type');\n        }\n        if (type === 'boolean') {\n            value = Boolean(value);\n        }\n        if (type === 'string') {\n            value = ToString(value);\n        }\n        if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {\n            throw new RangeError(\"\".concat(value, \" is not within \").concat(values.join(', ')));\n        }\n        return value;\n    }\n    return fallback;\n}\n", "/**\n * https://tc39.es/ecma402/#sec-getoptionsobject\n * @param options\n * @returns\n */\nexport function GetOptionsObject(options) {\n    if (typeof options === 'undefined') {\n        return Object.create(null);\n    }\n    if (typeof options === 'object') {\n        return options;\n    }\n    throw new TypeError('Options must be an object');\n}\n", "/**\n * https://tc39.es/ecma402/#sec-getstringorbooleanoption\n * @param opts\n * @param prop\n * @param values\n * @param trueValue\n * @param falsyValue\n * @param fallback\n */\nimport { ToString } from './262';\nexport function GetStringOrBooleanOption(opts, prop, values, trueValue, falsyValue, fallback) {\n    var value = opts[prop];\n    if (value === undefined) {\n        return fallback;\n    }\n    if (value === true) {\n        return trueValue;\n    }\n    var valueBoolean = Boolean(value);\n    if (valueBoolean === false) {\n        return falsyValue;\n    }\n    value = ToString(value);\n    if (value === 'true' || value === 'false') {\n        return fallback;\n    }\n    if ((values || []).indexOf(value) === -1) {\n        throw new RangeError(\"Invalid value \".concat(value));\n    }\n    return value;\n}\n", "/**\n * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers\n */\nexport var SANCTIONED_UNITS = [\n    'angle-degree',\n    'area-acre',\n    'area-hectare',\n    'concentr-percent',\n    'digital-bit',\n    'digital-byte',\n    'digital-gigabit',\n    'digital-gigabyte',\n    'digital-kilobit',\n    'digital-kilobyte',\n    'digital-megabit',\n    'digital-megabyte',\n    'digital-petabyte',\n    'digital-terabit',\n    'digital-terabyte',\n    'duration-day',\n    'duration-hour',\n    'duration-millisecond',\n    'duration-minute',\n    'duration-month',\n    'duration-second',\n    'duration-week',\n    'duration-year',\n    'length-centimeter',\n    'length-foot',\n    'length-inch',\n    'length-kilometer',\n    'length-meter',\n    'length-mile-scandinavian',\n    'length-mile',\n    'length-millimeter',\n    'length-yard',\n    'mass-gram',\n    'mass-kilogram',\n    'mass-ounce',\n    'mass-pound',\n    'mass-stone',\n    'temperature-celsius',\n    'temperature-fahrenheit',\n    'volume-fluid-ounce',\n    'volume-gallon',\n    'volume-liter',\n    'volume-milliliter',\n];\n// In CLDR, the unit name always follows the form `namespace-unit` pattern.\n// For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.\nexport function removeUnitNamespace(unit) {\n    return unit.slice(unit.indexOf('-') + 1);\n}\n/**\n * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers\n */\nexport var SIMPLE_UNITS = SANCTIONED_UNITS.map(removeUnitNamespace);\n/**\n * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier\n */\nexport function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {\n    return SIMPLE_UNITS.indexOf(unitIdentifier) > -1;\n}\n", "/**\n * https://tc39.es/ecma402/#sec-isvalidtimezonename\n * @param tz\n * @param implDetails implementation details\n */\nexport function IsValidTimeZoneName(tz, _a) {\n    var zoneNamesFromData = _a.zoneNamesFromData, uppercaseLinks = _a.uppercaseLinks;\n    var uppercasedTz = tz.toUpperCase();\n    var zoneNames = new Set();\n    var linkNames = new Set();\n    zoneNamesFromData.map(function (z) { return z.toUpperCase(); }).forEach(function (z) { return zoneNames.add(z); });\n    Object.keys(uppercaseLinks).forEach(function (linkName) {\n        linkNames.add(linkName.toUpperCase());\n        zoneNames.add(uppercaseLinks[linkName].toUpperCase());\n    });\n    return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);\n}\n", "/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toUpperCase(str) {\n    return str.replace(/([a-z])/g, function (_, c) { return c.toUpperCase(); });\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\nexport function IsWellFormedCurrencyCode(currency) {\n    currency = toUpperCase(currency);\n    if (currency.length !== 3) {\n        return false;\n    }\n    if (NOT_A_Z_REGEX.test(currency)) {\n        return false;\n    }\n    return true;\n}\n", "import { IsSanctionedSimpleUnitIdentifier } from './IsSanctionedSimpleUnitIdentifier';\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toLowerCase(str) {\n    return str.replace(/([A-Z])/g, function (_, c) { return c.toLowerCase(); });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\nexport function IsWellFormedUnitIdentifier(unit) {\n    unit = toLowerCase(unit);\n    if (IsSanctionedSimpleUnitIdentifier(unit)) {\n        return true;\n    }\n    var units = unit.split('-per-');\n    if (units.length !== 2) {\n        return false;\n    }\n    var numerator = units[0], denominator = units[1];\n    if (!IsSanctionedSimpleUnitIdentifier(numerator) ||\n        !IsSanctionedSimpleUnitIdentifier(denominator)) {\n        return false;\n    }\n    return true;\n}\n", "import { invariant } from '../utils';\nexport function ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode) {\n    if (x.eq(r1))\n        return r1;\n    invariant(r1.lessThan(x) && x.lessThan(r2), \"x should be between r1 and r2 but x=\".concat(x, \", r1=\").concat(r1, \", r2=\").concat(r2));\n    if (unsignedRoundingMode === 'zero') {\n        return r1;\n    }\n    if (unsignedRoundingMode === 'infinity') {\n        return r2;\n    }\n    var d1 = x.minus(r1);\n    var d2 = r2.minus(x);\n    if (d1.lessThan(d2)) {\n        return r1;\n    }\n    if (d2.lessThan(d1)) {\n        return r2;\n    }\n    invariant(d1.eq(d2), 'd1 should be equal to d2');\n    if (unsignedRoundingMode === 'half-zero') {\n        return r1;\n    }\n    if (unsignedRoundingMode === 'half-infinity') {\n        return r2;\n    }\n    invariant(unsignedRoundingMode === 'half-even', 'unsignedRoundingMode should be half-even');\n    var cardinality = r1.div(r2.minus(r1)).mod(2);\n    if (cardinality.isZero()) {\n        return r1;\n    }\n    return r2;\n}\n", "var PART_TYPES_TO_COLLAPSE = new Set([\n    'unit',\n    'exponentMinusSign',\n    'minusSign',\n    'plusSign',\n    'percentSign',\n    'exponentSeparator',\n    'percent',\n    'percentSign',\n    'currency',\n    'literal',\n]);\n/**\n * https://tc39.es/ecma402/#sec-collapsenumberrange\n * LDML: https://unicode-org.github.io/cldr/ldml/tr35-numbers.html#collapsing-number-ranges\n */\nexport function CollapseNumberRange(numberFormat, result, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var symbols = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem];\n    var rangeSignRegex = new RegExp(\"s?[\".concat(symbols.rangeSign, \"]s?\"));\n    var rangeSignIndex = result.findIndex(function (r) { return r.type === 'literal' && rangeSignRegex.test(r.value); });\n    var prefixSignParts = [];\n    for (var i = rangeSignIndex - 1; i >= 0; i--) {\n        if (!PART_TYPES_TO_COLLAPSE.has(result[i].type)) {\n            break;\n        }\n        prefixSignParts.unshift(result[i]);\n    }\n    // Don't collapse if it's a single code point\n    if (Array.from(prefixSignParts.map(function (p) { return p.value; }).join('')).length > 1) {\n        var newResult = Array.from(result);\n        newResult.splice(rangeSignIndex - prefixSignParts.length, prefixSignParts.length);\n        return newResult;\n    }\n    var suffixSignParts = [];\n    for (var i = rangeSignIndex + 1; i < result.length; i++) {\n        if (!PART_TYPES_TO_COLLAPSE.has(result[i].type)) {\n            break;\n        }\n        suffixSignParts.push(result[i]);\n    }\n    // Don't collapse if it's a single code point\n    if (Array.from(suffixSignParts.map(function (p) { return p.value; }).join('')).length > 1) {\n        var newResult = Array.from(result);\n        newResult.splice(rangeSignIndex + 1, suffixSignParts.length);\n        return newResult;\n    }\n    return result;\n}\n", "import Decimal from 'decimal.js';\nimport { invariant } from '../utils';\nDecimal.set({\n    toExpPos: 100,\n});\n/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nexport function ComputeExponentForMagnitude(internalSlots, magnitude) {\n    var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    switch (notation) {\n        case 'standard':\n            return 0;\n        case 'scientific':\n            return magnitude.toNumber();\n        case 'engineering':\n            var thousands = magnitude.div(3).floor();\n            return thousands.times(3).toNumber();\n        default: {\n            invariant(notation === 'compact', 'Invalid notation');\n            // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n            // number of the given magnitude in compact notation for the current locale.\n            var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;\n            var thresholdMap = void 0;\n            if (style === 'currency' && currencyDisplay !== 'name') {\n                var currency = dataLocaleData.numbers.currency[numberingSystem] ||\n                    dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n                thresholdMap = currency.short;\n            }\n            else {\n                var decimal = dataLocaleData.numbers.decimal[numberingSystem] ||\n                    dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n                thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n            }\n            if (!thresholdMap) {\n                return 0;\n            }\n            var num = Decimal.pow(10, magnitude).toString();\n            var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n            if (num < thresholds[0]) {\n                return 0;\n            }\n            if (num > thresholds[thresholds.length - 1]) {\n                return thresholds[thresholds.length - 1].length - 1;\n            }\n            var i = thresholds.indexOf(num);\n            if (i === -1) {\n                return 0;\n            }\n            // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n            // Special handling if the pattern is precisely `0`.\n            var magnitudeKey = thresholds[i];\n            // TODO: do we need to handle plural here?\n            var compactPattern = thresholdMap[magnitudeKey].other;\n            if (compactPattern === '0') {\n                return 0;\n            }\n            // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.\n            return (magnitudeKey.length -\n                thresholdMap[magnitudeKey].other.match(/0+/)[0].length);\n        }\n    }\n}\n", "var negativeMapping = {\n    ceil: 'zero',\n    floor: 'infinity',\n    expand: 'infinity',\n    trunc: 'zero',\n    halfCeil: 'half-zero',\n    halfFloor: 'half-infinity',\n    halfExpand: 'half-infinity',\n    halfTrunc: 'half-zero',\n    halfEven: 'half-even',\n};\nvar positiveMapping = {\n    ceil: 'infinity',\n    floor: 'zero',\n    expand: 'infinity',\n    trunc: 'zero',\n    halfCeil: 'half-infinity',\n    halfFloor: 'half-zero',\n    halfExpand: 'half-infinity',\n    halfTrunc: 'half-zero',\n    halfEven: 'half-even',\n};\nexport function GetUnsignedRoundingMode(roundingMode, isNegative) {\n    if (isNegative) {\n        return negativeMapping[roundingMode];\n    }\n    return positiveMapping[roundingMode];\n}\n", "import Decimal from 'decimal.js';\nimport { repeat } from '../utils';\nimport { ApplyUnsignedRoundingMode } from './ApplyUnsignedRoundingMode';\n//IMPL: Setting Decimal configuration\nDecimal.set({\n    toExpPos: 100,\n});\n//IMPL: Helper function to calculate raw fixed value\nfunction ToRawFixedFn(n, f) {\n    return n.times(Decimal.pow(10, -f));\n}\n//IMPL: Helper function to find n1 and r1\nfunction findN1R1(x, f, roundingIncrement) {\n    var nx = x.times(Decimal.pow(10, f)).floor();\n    var n1 = nx.div(roundingIncrement).floor().times(roundingIncrement);\n    var r1 = ToRawFixedFn(n1, f);\n    return {\n        n1: n1,\n        r1: r1,\n    };\n}\n//IMPL: Helper function to find n2 and r2\nfunction findN2R2(x, f, roundingIncrement) {\n    var nx = x.times(Decimal.pow(10, f)).ceil();\n    var n2 = nx.div(roundingIncrement).ceil().times(roundingIncrement);\n    var r2 = ToRawFixedFn(n2, f);\n    return {\n        n2: n2,\n        r2: r2,\n    };\n}\n/**\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction an integer between 0 and 20\n * @param maxFraction an integer between 0 and 20\n */\nexport function ToRawFixed(x, minFraction, maxFraction, roundingIncrement, unsignedRoundingMode) {\n    // 1. Let f be maxFraction.\n    var f = maxFraction;\n    // 2. Let n1 and r1 be the results of performing the maximized rounding of x to f fraction digits.\n    var _a = findN1R1(x, f, roundingIncrement), n1 = _a.n1, r1 = _a.r1;\n    // 3. Let n2 and r2 be the results of performing the minimized rounding of x to f fraction digits.\n    var _b = findN2R2(x, f, roundingIncrement), n2 = _b.n2, r2 = _b.r2;\n    // 4. Let r be ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode).\n    var r = ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode);\n    var n, xFinal;\n    var m;\n    // 5. If r is equal to r1, then\n    if (r.eq(r1)) {\n        // a. Let n be n1.\n        n = n1;\n        // b. Let xFinal be r1.\n        xFinal = r1;\n    }\n    else {\n        // 6. Else,\n        // a. Let n be n2.\n        n = n2;\n        // b. Let xFinal be r2.\n        xFinal = r2;\n    }\n    // 7. If n is 0, let m be \"0\".\n    if (n.isZero()) {\n        m = '0';\n    }\n    else {\n        // 8. Else, let m be the String representation of n.\n        m = n.toString();\n    }\n    var int;\n    // 9. If f is not 0, then\n    if (f !== 0) {\n        // a. Let k be the length of m.\n        var k = m.length;\n        // b. If k < f, then\n        if (k <= f) {\n            // i. Let z be the String value consisting of f + 1 - k occurrences of the character \"0\".\n            var z = repeat('0', f - k + 1);\n            // ii. Set m to the string-concatenation of z and m.\n            m = z + m;\n            // iii. Set k to f + 1.\n            k = f + 1;\n        }\n        // c. Let a be the substring of m from 0 to k - f.\n        var a = m.slice(0, k - f);\n        // d. Let b be the substring of m from k - f to k.\n        var b = m.slice(m.length - f);\n        // e. Set m to the string-concatenation of a, \".\", and b.\n        m = a + '.' + b;\n        // f. Let int be the length of a.\n        int = a.length;\n    }\n    else {\n        // 10. Else, let int be the length of m.\n        int = m.length;\n    }\n    // 11. Let cut be maxFraction - minFraction.\n    var cut = maxFraction - minFraction;\n    // 12. Repeat, while cut > 0 and the last character of m is \"0\",\n    while (cut > 0 && m[m.length - 1] === '0') {\n        // a. Remove the last character from m.\n        m = m.slice(0, m.length - 1);\n        // b. Decrease cut by 1.\n        cut--;\n    }\n    // 13. If the last character of m is \".\", then\n    if (m[m.length - 1] === '\\u002e') {\n        // a. Remove the last character from m.\n        m = m.slice(0, m.length - 1);\n    }\n    // 14. Return the Record { [[FormattedString]]: m, [[RoundedNumber]]: xFinal, [[IntegerDigitsCount]]: int, [[RoundingMagnitude]]: -f }.\n    return {\n        formattedString: m,\n        roundedNumber: xFinal,\n        integerDigitsCount: int,\n        roundingMagnitude: -f,\n    };\n}\n", "import Decimal from 'decimal.js';\nimport { ZERO } from '../constants';\nimport { invariant, repeat } from '../utils';\nimport { ApplyUnsignedRoundingMode } from './ApplyUnsignedRoundingMode';\n//IMPL: Helper function to find n1, e1, and r1\nfunction findN1E1R1(x, p) {\n    var maxN1 = Decimal.pow(10, p);\n    var minN1 = Decimal.pow(10, p - 1);\n    var maxE1 = x.div(minN1).log(10).plus(p).minus(1).ceil();\n    var currentE1 = maxE1;\n    while (true) {\n        var currentN1 = x.div(Decimal.pow(10, currentE1.minus(p).plus(1))).floor();\n        if (currentN1.lessThan(maxN1) && currentN1.greaterThanOrEqualTo(minN1)) {\n            var currentR1 = currentN1.times(Decimal.pow(10, currentE1.minus(p).plus(1)));\n            if (currentR1.lessThanOrEqualTo(x)) {\n                return {\n                    n1: currentN1,\n                    e1: currentE1,\n                    r1: currentR1,\n                };\n            }\n        }\n        currentE1 = currentE1.minus(1);\n    }\n}\n//IMPL: Helper function to find n2, e2, and r2\nfunction findN2E2R2(x, p) {\n    var maxN2 = Decimal.pow(10, p);\n    var minN2 = Decimal.pow(10, p - 1);\n    var minE2 = x.div(maxN2).log(10).plus(p).minus(1).floor();\n    var currentE2 = minE2;\n    while (true) {\n        var currentN2 = x.div(Decimal.pow(10, currentE2.minus(p).plus(1))).ceil();\n        if (currentN2.lessThan(maxN2) && currentN2.greaterThanOrEqualTo(minN2)) {\n            var currentR2 = currentN2.times(Decimal.pow(10, currentE2.minus(p).plus(1)));\n            if (currentR2.greaterThanOrEqualTo(x)) {\n                return {\n                    n2: currentN2,\n                    e2: currentE2,\n                    r2: currentR2,\n                };\n            }\n        }\n        currentE2 = currentE2.plus(1);\n    }\n}\n/**\n * https://tc39.es/ecma402/#sec-torawprecision\n * @param x a finite non-negative Number or BigInt\n * @param minPrecision an integer between 1 and 21\n * @param maxPrecision an integer between 1 and 21\n */\nexport function ToRawPrecision(x, minPrecision, maxPrecision, unsignedRoundingMode) {\n    // 1. Let p be maxPrecision.\n    var p = maxPrecision;\n    var m;\n    var e;\n    var xFinal;\n    // 2. If x = 0, then\n    if (x.isZero()) {\n        // a. Let m be the String value consisting of p occurrences of the character \"0\".\n        m = repeat('0', p);\n        // b. Let e be 0.\n        e = 0;\n        // c. Let xFinal be 0.\n        xFinal = ZERO;\n    }\n    else {\n        // 3. Else,\n        // a. Let {n1, e1, r1} be the result of findN1E1R1(x, p).\n        var _a = findN1E1R1(x, p), n1 = _a.n1, e1 = _a.e1, r1 = _a.r1;\n        // b. Let {n2, e2, r2} be the result of findN2E2R2(x, p).\n        var _b = findN2E2R2(x, p), n2 = _b.n2, e2 = _b.e2, r2 = _b.r2;\n        // c. Let r be ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode).\n        var r = ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode);\n        var n \n        // d. If r = r1, then\n        = void 0;\n        // d. If r = r1, then\n        if (r.eq(r1)) {\n            // i. Let n be n1.\n            n = n1;\n            // ii. Let e be e1.\n            e = e1.toNumber();\n            // iii. Let xFinal be r1.\n            xFinal = r1;\n        }\n        else {\n            // e. Else,\n            // i. Let n be n2.\n            n = n2;\n            // ii. Let e be e2.\n            e = e2.toNumber();\n            // iii. Let xFinal be r2.\n            xFinal = r2;\n        }\n        // f. Let m be the String representation of n.\n        m = n.toString();\n    }\n    var int;\n    // 4. If e ≥ p - 1, then\n    if (e >= p - 1) {\n        // a. Let m be the string-concatenation of m and p - 1 - e occurrences of the character \"0\".\n        m = m + repeat('0', e - p + 1);\n        // b. Let int be e + 1.\n        int = e + 1;\n    }\n    else if (e >= 0) {\n        // 5. Else if e ≥ 0, then\n        // a. Let m be the string-concatenation of the first e + 1 characters of m, \".\", and the remaining p - (e + 1) characters of m.\n        m = m.slice(0, e + 1) + '.' + m.slice(m.length - (p - (e + 1)));\n        // b. Let int be e + 1.\n        int = e + 1;\n    }\n    else {\n        // 6. Else,\n        // a. Assert: e < 0.\n        invariant(e < 0, 'e should be less than 0');\n        // b. Let m be the string-concatenation of \"0.\", -e - 1 occurrences of the character \"0\", and m.\n        m = '0.' + repeat('0', -e - 1) + m;\n        // c. Let int be 1.\n        int = 1;\n    }\n    // 7. If m contains \".\", and maxPrecision > minPrecision, then\n    if (m.includes('.') && maxPrecision > minPrecision) {\n        // a. Let cut be maxPrecision - minPrecision.\n        var cut = maxPrecision - minPrecision;\n        // b. Repeat, while cut > 0 and the last character of m is \"0\",\n        while (cut > 0 && m[m.length - 1] === '0') {\n            // i. Remove the last character from m.\n            m = m.slice(0, m.length - 1);\n            // ii. Decrease cut by 1.\n            cut--;\n        }\n        // c. If the last character of m is \".\", then\n        if (m[m.length - 1] === '.') {\n            // i. Remove the last character from m.\n            m = m.slice(0, m.length - 1);\n        }\n    }\n    // 8. Return the Record { [[FormattedString]]: m, [[RoundedNumber]]: xFinal, [[IntegerDigitsCount]]: int, [[RoundingMagnitude]]: e }.\n    return {\n        formattedString: m,\n        roundedNumber: xFinal,\n        integerDigitsCount: int,\n        roundingMagnitude: e,\n    };\n}\n", "import { NEGATIVE_ZERO, ZERO } from '../constants';\nimport { invariant, repeat } from '../utils';\nimport { GetUnsignedRoundingMode } from './GetUnsignedRoundingMode';\nimport { ToRawFixed } from './ToRawFixed';\nimport { ToRawPrecision } from './ToRawPrecision';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function FormatNumericToString(intlObject, _x) {\n    var x = _x;\n    var sign;\n    // -0\n    if (x.isZero() && x.isNegative()) {\n        sign = 'negative';\n        x = ZERO;\n    }\n    else {\n        invariant(x.isFinite(), 'NumberFormatDigitInternalSlots value is not finite');\n        if (x.lessThan(0)) {\n            sign = 'negative';\n        }\n        else {\n            sign = 'positive';\n        }\n        if (sign === 'negative') {\n            x = x.negated();\n        }\n    }\n    var result;\n    var roundingType = intlObject.roundingType;\n    var unsignedRoundingMode = GetUnsignedRoundingMode(intlObject.roundingMode, sign === 'negative');\n    switch (roundingType) {\n        case 'significantDigits':\n            result = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits, unsignedRoundingMode);\n            break;\n        case 'fractionDigits':\n            result = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits, intlObject.roundingIncrement, unsignedRoundingMode);\n            break;\n        default:\n            var sResult = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits, unsignedRoundingMode);\n            var fResult = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits, intlObject.roundingIncrement, unsignedRoundingMode);\n            if (intlObject.roundingType === 'morePrecision') {\n                if (sResult.roundingMagnitude <= fResult.roundingMagnitude) {\n                    result = sResult;\n                }\n                else {\n                    result = fResult;\n                }\n            }\n            else {\n                invariant(intlObject.roundingType === 'lessPrecision', 'Invalid roundingType');\n                if (sResult.roundingMagnitude <= fResult.roundingMagnitude) {\n                    result = fResult;\n                }\n                else {\n                    result = sResult;\n                }\n            }\n            break;\n    }\n    x = result.roundedNumber;\n    var string = result.formattedString;\n    if (intlObject.trailingZeroDisplay === 'stripIfInteger' && x.isInteger()) {\n        var i = string.indexOf('.');\n        if (i > -1) {\n            string = string.slice(0, i);\n        }\n    }\n    var int = result.integerDigitsCount;\n    var minInteger = intlObject.minimumIntegerDigits;\n    if (int < minInteger) {\n        var forwardZeros = repeat('0', minInteger - int);\n        string = forwardZeros + string;\n    }\n    if (sign === 'negative') {\n        if (x.isZero()) {\n            x = NEGATIVE_ZERO;\n        }\n        else {\n            x = x.negated();\n        }\n    }\n    return { roundedNumber: x, formattedString: string };\n}\n", "import Decimal from 'decimal.js';\nimport { ComputeExponentForMagnitude } from './ComputeExponentForMagnitude';\nimport { FormatNumericToString } from './FormatNumericToString';\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nexport function ComputeExponent(internalSlots, x) {\n    if (x.isZero()) {\n        return [0, 0];\n    }\n    if (x.isNegative()) {\n        x = x.negated();\n    }\n    var magnitude = x.log(10).floor();\n    var exponent = ComputeExponentForMagnitude(internalSlots, magnitude);\n    // Preserve more precision by doing multiplication when exponent is negative.\n    x = x.times(Decimal.pow(10, -exponent));\n    var formatNumberResult = FormatNumericToString(internalSlots, x);\n    if (formatNumberResult.roundedNumber.isZero()) {\n        return [exponent, magnitude.toNumber()];\n    }\n    var newMagnitude = formatNumberResult.roundedNumber.log(10).floor();\n    if (newMagnitude.eq(magnitude.minus(exponent))) {\n        return [exponent, magnitude.toNumber()];\n    }\n    return [\n        ComputeExponentForMagnitude(internalSlots, magnitude.plus(1)),\n        magnitude.plus(1).toNumber(),\n    ];\n}\n", "import { HasOwnProperty } from '../262';\n/**\n * https://tc39.es/ecma402/#sec-currencydigits\n */\nexport function CurrencyDigits(c, _a) {\n    var currencyDigitsData = _a.currencyDigitsData;\n    return HasOwnProperty(currencyDigitsData, c)\n        ? currencyDigitsData[c]\n        : 2;\n}\n", "// @generated from regex-gen.ts\nexport var S_UNICODE_REGEX = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BF\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEE0-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF73\\uDF80-\\uDFD8\\uDFE0-\\uDFEB]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6\\uDF00-\\uDF92\\uDF94-\\uDFCA]/;\n", "export var digitMapping = {\n    \"adlm\": [\n        \"𞥐\",\n        \"𞥑\",\n        \"𞥒\",\n        \"𞥓\",\n        \"𞥔\",\n        \"𞥕\",\n        \"𞥖\",\n        \"𞥗\",\n        \"𞥘\",\n        \"𞥙\"\n    ],\n    \"ahom\": [\n        \"𑜰\",\n        \"𑜱\",\n        \"𑜲\",\n        \"𑜳\",\n        \"𑜴\",\n        \"𑜵\",\n        \"𑜶\",\n        \"𑜷\",\n        \"𑜸\",\n        \"𑜹\"\n    ],\n    \"arab\": [\n        \"٠\",\n        \"١\",\n        \"٢\",\n        \"٣\",\n        \"٤\",\n        \"٥\",\n        \"٦\",\n        \"٧\",\n        \"٨\",\n        \"٩\"\n    ],\n    \"arabext\": [\n        \"۰\",\n        \"۱\",\n        \"۲\",\n        \"۳\",\n        \"۴\",\n        \"۵\",\n        \"۶\",\n        \"۷\",\n        \"۸\",\n        \"۹\"\n    ],\n    \"bali\": [\n        \"᭐\",\n        \"᭑\",\n        \"᭒\",\n        \"᭓\",\n        \"᭔\",\n        \"᭕\",\n        \"᭖\",\n        \"᭗\",\n        \"᭘\",\n        \"᭙\"\n    ],\n    \"beng\": [\n        \"০\",\n        \"১\",\n        \"২\",\n        \"৩\",\n        \"৪\",\n        \"৫\",\n        \"৬\",\n        \"৭\",\n        \"৮\",\n        \"৯\"\n    ],\n    \"bhks\": [\n        \"𑱐\",\n        \"𑱑\",\n        \"𑱒\",\n        \"𑱓\",\n        \"𑱔\",\n        \"𑱕\",\n        \"𑱖\",\n        \"𑱗\",\n        \"𑱘\",\n        \"𑱙\"\n    ],\n    \"brah\": [\n        \"𑁦\",\n        \"𑁧\",\n        \"𑁨\",\n        \"𑁩\",\n        \"𑁪\",\n        \"𑁫\",\n        \"𑁬\",\n        \"𑁭\",\n        \"𑁮\",\n        \"𑁯\"\n    ],\n    \"cakm\": [\n        \"𑄶\",\n        \"𑄷\",\n        \"𑄸\",\n        \"𑄹\",\n        \"𑄺\",\n        \"𑄻\",\n        \"𑄼\",\n        \"𑄽\",\n        \"𑄾\",\n        \"𑄿\"\n    ],\n    \"cham\": [\n        \"꩐\",\n        \"꩑\",\n        \"꩒\",\n        \"꩓\",\n        \"꩔\",\n        \"꩕\",\n        \"꩖\",\n        \"꩗\",\n        \"꩘\",\n        \"꩙\"\n    ],\n    \"deva\": [\n        \"०\",\n        \"१\",\n        \"२\",\n        \"३\",\n        \"४\",\n        \"५\",\n        \"६\",\n        \"७\",\n        \"८\",\n        \"९\"\n    ],\n    \"diak\": [\n        \"𑥐\",\n        \"𑥑\",\n        \"𑥒\",\n        \"𑥓\",\n        \"𑥔\",\n        \"𑥕\",\n        \"𑥖\",\n        \"𑥗\",\n        \"𑥘\",\n        \"𑥙\"\n    ],\n    \"fullwide\": [\n        \"０\",\n        \"１\",\n        \"２\",\n        \"３\",\n        \"４\",\n        \"５\",\n        \"６\",\n        \"７\",\n        \"８\",\n        \"９\"\n    ],\n    \"gong\": [\n        \"𑶠\",\n        \"𑶡\",\n        \"𑶢\",\n        \"𑶣\",\n        \"𑶤\",\n        \"𑶥\",\n        \"𑶦\",\n        \"𑶧\",\n        \"𑶨\",\n        \"𑶩\"\n    ],\n    \"gonm\": [\n        \"𑵐\",\n        \"𑵑\",\n        \"𑵒\",\n        \"𑵓\",\n        \"𑵔\",\n        \"𑵕\",\n        \"𑵖\",\n        \"𑵗\",\n        \"𑵘\",\n        \"𑵙\"\n    ],\n    \"gujr\": [\n        \"૦\",\n        \"૧\",\n        \"૨\",\n        \"૩\",\n        \"૪\",\n        \"૫\",\n        \"૬\",\n        \"૭\",\n        \"૮\",\n        \"૯\"\n    ],\n    \"guru\": [\n        \"੦\",\n        \"੧\",\n        \"੨\",\n        \"੩\",\n        \"੪\",\n        \"੫\",\n        \"੬\",\n        \"੭\",\n        \"੮\",\n        \"੯\"\n    ],\n    \"hanidec\": [\n        \"〇\",\n        \"一\",\n        \"二\",\n        \"三\",\n        \"四\",\n        \"五\",\n        \"六\",\n        \"七\",\n        \"八\",\n        \"九\"\n    ],\n    \"hmng\": [\n        \"𖭐\",\n        \"𖭑\",\n        \"𖭒\",\n        \"𖭓\",\n        \"𖭔\",\n        \"𖭕\",\n        \"𖭖\",\n        \"𖭗\",\n        \"𖭘\",\n        \"𖭙\"\n    ],\n    \"hmnp\": [\n        \"𞅀\",\n        \"𞅁\",\n        \"𞅂\",\n        \"𞅃\",\n        \"𞅄\",\n        \"𞅅\",\n        \"𞅆\",\n        \"𞅇\",\n        \"𞅈\",\n        \"𞅉\"\n    ],\n    \"java\": [\n        \"꧐\",\n        \"꧑\",\n        \"꧒\",\n        \"꧓\",\n        \"꧔\",\n        \"꧕\",\n        \"꧖\",\n        \"꧗\",\n        \"꧘\",\n        \"꧙\"\n    ],\n    \"kali\": [\n        \"꤀\",\n        \"꤁\",\n        \"꤂\",\n        \"꤃\",\n        \"꤄\",\n        \"꤅\",\n        \"꤆\",\n        \"꤇\",\n        \"꤈\",\n        \"꤉\"\n    ],\n    \"khmr\": [\n        \"០\",\n        \"១\",\n        \"២\",\n        \"៣\",\n        \"៤\",\n        \"៥\",\n        \"៦\",\n        \"៧\",\n        \"៨\",\n        \"៩\"\n    ],\n    \"knda\": [\n        \"೦\",\n        \"೧\",\n        \"೨\",\n        \"೩\",\n        \"೪\",\n        \"೫\",\n        \"೬\",\n        \"೭\",\n        \"೮\",\n        \"೯\"\n    ],\n    \"lana\": [\n        \"᪀\",\n        \"᪁\",\n        \"᪂\",\n        \"᪃\",\n        \"᪄\",\n        \"᪅\",\n        \"᪆\",\n        \"᪇\",\n        \"᪈\",\n        \"᪉\"\n    ],\n    \"lanatham\": [\n        \"᪐\",\n        \"᪑\",\n        \"᪒\",\n        \"᪓\",\n        \"᪔\",\n        \"᪕\",\n        \"᪖\",\n        \"᪗\",\n        \"᪘\",\n        \"᪙\"\n    ],\n    \"laoo\": [\n        \"໐\",\n        \"໑\",\n        \"໒\",\n        \"໓\",\n        \"໔\",\n        \"໕\",\n        \"໖\",\n        \"໗\",\n        \"໘\",\n        \"໙\"\n    ],\n    \"lepc\": [\n        \"᪐\",\n        \"᪑\",\n        \"᪒\",\n        \"᪓\",\n        \"᪔\",\n        \"᪕\",\n        \"᪖\",\n        \"᪗\",\n        \"᪘\",\n        \"᪙\"\n    ],\n    \"limb\": [\n        \"᥆\",\n        \"᥇\",\n        \"᥈\",\n        \"᥉\",\n        \"᥊\",\n        \"᥋\",\n        \"᥌\",\n        \"᥍\",\n        \"᥎\",\n        \"᥏\"\n    ],\n    \"mathbold\": [\n        \"𝟎\",\n        \"𝟏\",\n        \"𝟐\",\n        \"𝟑\",\n        \"𝟒\",\n        \"𝟓\",\n        \"𝟔\",\n        \"𝟕\",\n        \"𝟖\",\n        \"𝟗\"\n    ],\n    \"mathdbl\": [\n        \"𝟘\",\n        \"𝟙\",\n        \"𝟚\",\n        \"𝟛\",\n        \"𝟜\",\n        \"𝟝\",\n        \"𝟞\",\n        \"𝟟\",\n        \"𝟠\",\n        \"𝟡\"\n    ],\n    \"mathmono\": [\n        \"𝟶\",\n        \"𝟷\",\n        \"𝟸\",\n        \"𝟹\",\n        \"𝟺\",\n        \"𝟻\",\n        \"𝟼\",\n        \"𝟽\",\n        \"𝟾\",\n        \"𝟿\"\n    ],\n    \"mathsanb\": [\n        \"𝟬\",\n        \"𝟭\",\n        \"𝟮\",\n        \"𝟯\",\n        \"𝟰\",\n        \"𝟱\",\n        \"𝟲\",\n        \"𝟳\",\n        \"𝟴\",\n        \"𝟵\"\n    ],\n    \"mathsans\": [\n        \"𝟢\",\n        \"𝟣\",\n        \"𝟤\",\n        \"𝟥\",\n        \"𝟦\",\n        \"𝟧\",\n        \"𝟨\",\n        \"𝟩\",\n        \"𝟪\",\n        \"𝟫\"\n    ],\n    \"mlym\": [\n        \"൦\",\n        \"൧\",\n        \"൨\",\n        \"൩\",\n        \"൪\",\n        \"൫\",\n        \"൬\",\n        \"൭\",\n        \"൮\",\n        \"൯\"\n    ],\n    \"modi\": [\n        \"𑙐\",\n        \"𑙑\",\n        \"𑙒\",\n        \"𑙓\",\n        \"𑙔\",\n        \"𑙕\",\n        \"𑙖\",\n        \"𑙗\",\n        \"𑙘\",\n        \"𑙙\"\n    ],\n    \"mong\": [\n        \"᠐\",\n        \"᠑\",\n        \"᠒\",\n        \"᠓\",\n        \"᠔\",\n        \"᠕\",\n        \"᠖\",\n        \"᠗\",\n        \"᠘\",\n        \"᠙\"\n    ],\n    \"mroo\": [\n        \"𖩠\",\n        \"𖩡\",\n        \"𖩢\",\n        \"𖩣\",\n        \"𖩤\",\n        \"𖩥\",\n        \"𖩦\",\n        \"𖩧\",\n        \"𖩨\",\n        \"𖩩\"\n    ],\n    \"mtei\": [\n        \"꯰\",\n        \"꯱\",\n        \"꯲\",\n        \"꯳\",\n        \"꯴\",\n        \"꯵\",\n        \"꯶\",\n        \"꯷\",\n        \"꯸\",\n        \"꯹\"\n    ],\n    \"mymr\": [\n        \"၀\",\n        \"၁\",\n        \"၂\",\n        \"၃\",\n        \"၄\",\n        \"၅\",\n        \"၆\",\n        \"၇\",\n        \"၈\",\n        \"၉\"\n    ],\n    \"mymrshan\": [\n        \"႐\",\n        \"႑\",\n        \"႒\",\n        \"႓\",\n        \"႔\",\n        \"႕\",\n        \"႖\",\n        \"႗\",\n        \"႘\",\n        \"႙\"\n    ],\n    \"mymrtlng\": [\n        \"꧰\",\n        \"꧱\",\n        \"꧲\",\n        \"꧳\",\n        \"꧴\",\n        \"꧵\",\n        \"꧶\",\n        \"꧷\",\n        \"꧸\",\n        \"꧹\"\n    ],\n    \"newa\": [\n        \"𑑐\",\n        \"𑑑\",\n        \"𑑒\",\n        \"𑑓\",\n        \"𑑔\",\n        \"𑑕\",\n        \"𑑖\",\n        \"𑑗\",\n        \"𑑘\",\n        \"𑑙\"\n    ],\n    \"nkoo\": [\n        \"߀\",\n        \"߁\",\n        \"߂\",\n        \"߃\",\n        \"߄\",\n        \"߅\",\n        \"߆\",\n        \"߇\",\n        \"߈\",\n        \"߉\"\n    ],\n    \"olck\": [\n        \"᱐\",\n        \"᱑\",\n        \"᱒\",\n        \"᱓\",\n        \"᱔\",\n        \"᱕\",\n        \"᱖\",\n        \"᱗\",\n        \"᱘\",\n        \"᱙\"\n    ],\n    \"orya\": [\n        \"୦\",\n        \"୧\",\n        \"୨\",\n        \"୩\",\n        \"୪\",\n        \"୫\",\n        \"୬\",\n        \"୭\",\n        \"୮\",\n        \"୯\"\n    ],\n    \"osma\": [\n        \"𐒠\",\n        \"𐒡\",\n        \"𐒢\",\n        \"𐒣\",\n        \"𐒤\",\n        \"𐒥\",\n        \"𐒦\",\n        \"𐒧\",\n        \"𐒨\",\n        \"𐒩\"\n    ],\n    \"rohg\": [\n        \"𐴰\",\n        \"𐴱\",\n        \"𐴲\",\n        \"𐴳\",\n        \"𐴴\",\n        \"𐴵\",\n        \"𐴶\",\n        \"𐴷\",\n        \"𐴸\",\n        \"𐴹\"\n    ],\n    \"saur\": [\n        \"꣐\",\n        \"꣑\",\n        \"꣒\",\n        \"꣓\",\n        \"꣔\",\n        \"꣕\",\n        \"꣖\",\n        \"꣗\",\n        \"꣘\",\n        \"꣙\"\n    ],\n    \"segment\": [\n        \"🯰\",\n        \"🯱\",\n        \"🯲\",\n        \"🯳\",\n        \"🯴\",\n        \"🯵\",\n        \"🯶\",\n        \"🯷\",\n        \"🯸\",\n        \"🯹\"\n    ],\n    \"shrd\": [\n        \"𑇐\",\n        \"𑇑\",\n        \"𑇒\",\n        \"𑇓\",\n        \"𑇔\",\n        \"𑇕\",\n        \"𑇖\",\n        \"𑇗\",\n        \"𑇘\",\n        \"𑇙\"\n    ],\n    \"sind\": [\n        \"𑋰\",\n        \"𑋱\",\n        \"𑋲\",\n        \"𑋳\",\n        \"𑋴\",\n        \"𑋵\",\n        \"𑋶\",\n        \"𑋷\",\n        \"𑋸\",\n        \"𑋹\"\n    ],\n    \"sinh\": [\n        \"෦\",\n        \"෧\",\n        \"෨\",\n        \"෩\",\n        \"෪\",\n        \"෫\",\n        \"෬\",\n        \"෭\",\n        \"෮\",\n        \"෯\"\n    ],\n    \"sora\": [\n        \"𑃰\",\n        \"𑃱\",\n        \"𑃲\",\n        \"𑃳\",\n        \"𑃴\",\n        \"𑃵\",\n        \"𑃶\",\n        \"𑃷\",\n        \"𑃸\",\n        \"𑃹\"\n    ],\n    \"sund\": [\n        \"᮰\",\n        \"᮱\",\n        \"᮲\",\n        \"᮳\",\n        \"᮴\",\n        \"᮵\",\n        \"᮶\",\n        \"᮷\",\n        \"᮸\",\n        \"᮹\"\n    ],\n    \"takr\": [\n        \"𑛀\",\n        \"𑛁\",\n        \"𑛂\",\n        \"𑛃\",\n        \"𑛄\",\n        \"𑛅\",\n        \"𑛆\",\n        \"𑛇\",\n        \"𑛈\",\n        \"𑛉\"\n    ],\n    \"talu\": [\n        \"᧐\",\n        \"᧑\",\n        \"᧒\",\n        \"᧓\",\n        \"᧔\",\n        \"᧕\",\n        \"᧖\",\n        \"᧗\",\n        \"᧘\",\n        \"᧙\"\n    ],\n    \"tamldec\": [\n        \"௦\",\n        \"௧\",\n        \"௨\",\n        \"௩\",\n        \"௪\",\n        \"௫\",\n        \"௬\",\n        \"௭\",\n        \"௮\",\n        \"௯\"\n    ],\n    \"telu\": [\n        \"౦\",\n        \"౧\",\n        \"౨\",\n        \"౩\",\n        \"౪\",\n        \"౫\",\n        \"౬\",\n        \"౭\",\n        \"౮\",\n        \"౯\"\n    ],\n    \"thai\": [\n        \"๐\",\n        \"๑\",\n        \"๒\",\n        \"๓\",\n        \"๔\",\n        \"๕\",\n        \"๖\",\n        \"๗\",\n        \"๘\",\n        \"๙\"\n    ],\n    \"tibt\": [\n        \"༠\",\n        \"༡\",\n        \"༢\",\n        \"༣\",\n        \"༤\",\n        \"༥\",\n        \"༦\",\n        \"༧\",\n        \"༨\",\n        \"༩\"\n    ],\n    \"tirh\": [\n        \"𑓐\",\n        \"𑓑\",\n        \"𑓒\",\n        \"𑓓\",\n        \"𑓔\",\n        \"𑓕\",\n        \"𑓖\",\n        \"𑓗\",\n        \"𑓘\",\n        \"𑓙\"\n    ],\n    \"vaii\": [\n        \"ᘠ\",\n        \"ᘡ\",\n        \"ᘢ\",\n        \"ᘣ\",\n        \"ᘤ\",\n        \"ᘥ\",\n        \"ᘦ\",\n        \"ᘧ\",\n        \"ᘨ\",\n        \"ᘩ\"\n    ],\n    \"wara\": [\n        \"𑣠\",\n        \"𑣡\",\n        \"𑣢\",\n        \"𑣣\",\n        \"𑣤\",\n        \"𑣥\",\n        \"𑣦\",\n        \"𑣧\",\n        \"𑣨\",\n        \"𑣩\"\n    ],\n    \"wcho\": [\n        \"𞋰\",\n        \"𞋱\",\n        \"𞋲\",\n        \"𞋳\",\n        \"𞋴\",\n        \"𞋵\",\n        \"𞋶\",\n        \"𞋷\",\n        \"𞋸\",\n        \"𞋹\"\n    ]\n};\n", "import Decimal from 'decimal.js';\nimport { S_UNICODE_REGEX } from '../regex.generated';\nimport { digitMapping } from './digit-mapping.generated';\nimport { GetUnsignedRoundingMode } from './GetUnsignedRoundingMode';\nimport { ToRawFixed } from './ToRawFixed';\n// This is from: unicode-12.1.0/General_Category/Symbol/regex.js\n// IE11 does not support unicode flag, otherwise this is just /\\p{S}/u.\n// /^\\p{S}/u\nvar CARET_S_UNICODE_REGEX = new RegExp(\"^\".concat(S_UNICODE_REGEX.source));\n// /\\p{S}$/u\nvar S_DOLLAR_UNICODE_REGEX = new RegExp(\"\".concat(S_UNICODE_REGEX.source, \"$\"));\nvar CLDR_NUMBER_PATTERN = /[#0](?:[\\.,][#0]+)*/g;\nexport default function formatToParts(numberResult, data, pl, options) {\n    var _a;\n    var sign = numberResult.sign, exponent = numberResult.exponent, magnitude = numberResult.magnitude;\n    var notation = options.notation, style = options.style, numberingSystem = options.numberingSystem;\n    var defaultNumberingSystem = data.numbers.nu[0];\n    // #region Part 1: partition and interpolate the CLDR number pattern.\n    // ----------------------------------------------------------\n    var compactNumberPattern = null;\n    if (notation === 'compact' && magnitude) {\n        compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);\n    }\n    // This is used multiple times\n    var nonNameCurrencyPart;\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var byCurrencyDisplay = data.currencies[options.currency];\n        if (byCurrencyDisplay) {\n            switch (options.currencyDisplay) {\n                case 'code':\n                    nonNameCurrencyPart = options.currency;\n                    break;\n                case 'symbol':\n                    nonNameCurrencyPart = byCurrencyDisplay.symbol;\n                    break;\n                default:\n                    nonNameCurrencyPart = byCurrencyDisplay.narrow;\n                    break;\n            }\n        }\n        else {\n            // Fallback for unknown currency\n            nonNameCurrencyPart = options.currency;\n        }\n    }\n    var numberPattern;\n    if (!compactNumberPattern) {\n        // Note: if the style is unit, or is currency and the currency display is name,\n        // its unit parts will be interpolated in part 2. So here we can fallback to decimal.\n        if (style === 'decimal' ||\n            style === 'unit' ||\n            (style === 'currency' && options.currencyDisplay === 'name')) {\n            // Shortcut for decimal\n            var decimalData = data.numbers.decimal[numberingSystem] ||\n                data.numbers.decimal[defaultNumberingSystem];\n            numberPattern = getPatternForSign(decimalData.standard, sign);\n        }\n        else if (style === 'currency') {\n            var currencyData = data.numbers.currency[numberingSystem] ||\n                data.numbers.currency[defaultNumberingSystem];\n            // We replace number pattern part with `0` for easier postprocessing.\n            numberPattern = getPatternForSign(currencyData[options.currencySign], sign);\n        }\n        else {\n            // percent\n            var percentPattern = data.numbers.percent[numberingSystem] ||\n                data.numbers.percent[defaultNumberingSystem];\n            numberPattern = getPatternForSign(percentPattern, sign);\n        }\n    }\n    else {\n        numberPattern = compactNumberPattern;\n    }\n    // Extract the decimal number pattern string. It looks like \"#,##0,00\", which will later be\n    // used to infer decimal group sizes.\n    var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0];\n    // Now we start to substitute patterns\n    // 1. replace strings like `0` and `#,##0.00` with `{0}`\n    // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)\n    numberPattern = numberPattern\n        .replace(CLDR_NUMBER_PATTERN, '{0}')\n        .replace(/'(.)'/g, '$1');\n    // Handle currency spacing (both compact and non-compact).\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var currencyData = data.numbers.currency[numberingSystem] ||\n            data.numbers.currency[defaultNumberingSystem];\n        // See `currencySpacing` substitution rule in TR-35.\n        // Here we always assume the currencyMatch is \"[:^S:]\" and surroundingMatch is \"[:digit:]\".\n        //\n        // Example 1: for pattern \"#,##0.00¤\" with symbol \"US$\", we replace \"¤\" with the symbol,\n        // but insert an extra non-break space before the symbol, because \"[:^S:]\" matches \"U\" in\n        // \"US$\" and \"[:digit:]\" matches the latn numbering system digits.\n        //\n        // Example 2: for pattern \"¤#,##0.00\" with symbol \"US$\", there is no spacing between symbol\n        // and number, because `$` does not match \"[:^S:]\".\n        //\n        // Implementation note: here we do the best effort to infer the insertion.\n        // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.\n        var afterCurrency = currencyData.currencySpacing.afterInsertBetween;\n        if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('¤{0}', \"\\u00A4\".concat(afterCurrency, \"{0}\"));\n        }\n        var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;\n        if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('{0}¤', \"{0}\".concat(beforeCurrency, \"\\u00A4\"));\n        }\n    }\n    // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.\n    var numberPatternParts = numberPattern.split(/({c:[^}]+}|\\{0\\}|[¤%\\-\\+])/g);\n    var numberParts = [];\n    var symbols = data.numbers.symbols[numberingSystem] ||\n        data.numbers.symbols[defaultNumberingSystem];\n    for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {\n        var part = numberPatternParts_1[_i];\n        if (!part) {\n            continue;\n        }\n        switch (part) {\n            case '{0}': {\n                // We only need to handle scientific and engineering notation here.\n                numberParts.push.apply(numberParts, partitionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, \n                // If compact number pattern exists, do not insert group separators.\n                !compactNumberPattern && ((_a = options.useGrouping) !== null && _a !== void 0 ? _a : true), decimalNumberPattern, style, options.roundingIncrement, GetUnsignedRoundingMode(options.roundingMode, sign === -1)));\n                break;\n            }\n            case '-':\n                numberParts.push({ type: 'minusSign', value: symbols.minusSign });\n                break;\n            case '+':\n                numberParts.push({ type: 'plusSign', value: symbols.plusSign });\n                break;\n            case '%':\n                numberParts.push({ type: 'percentSign', value: symbols.percentSign });\n                break;\n            case '¤':\n                // Computed above when handling currency spacing.\n                numberParts.push({ type: 'currency', value: nonNameCurrencyPart });\n                break;\n            default:\n                if (/^\\{c:/.test(part)) {\n                    numberParts.push({\n                        type: 'compact',\n                        value: part.substring(3, part.length - 1),\n                    });\n                }\n                else {\n                    // literal\n                    numberParts.push({ type: 'literal', value: part });\n                }\n                break;\n        }\n    }\n    // #endregion\n    // #region Part 2: interpolate unit pattern if necessary.\n    // ----------------------------------------------\n    switch (style) {\n        case 'currency': {\n            // `currencyDisplay: 'name'` has similar pattern handling as units.\n            if (options.currencyDisplay === 'name') {\n                var unitPattern = (data.numbers.currency[numberingSystem] ||\n                    data.numbers.currency[defaultNumberingSystem]).unitPattern;\n                // Select plural\n                var unitName = void 0;\n                var currencyNameData = data.currencies[options.currency];\n                if (currencyNameData) {\n                    unitName = selectPlural(pl, numberResult.roundedNumber\n                        .times(Decimal.pow(10, exponent))\n                        .toNumber(), currencyNameData.displayName);\n                }\n                else {\n                    // Fallback for unknown currency\n                    unitName = options.currency;\n                }\n                // Do {0} and {1} substitution\n                var unitPatternParts = unitPattern.split(/(\\{[01]\\})/g);\n                var result = [];\n                for (var _b = 0, unitPatternParts_1 = unitPatternParts; _b < unitPatternParts_1.length; _b++) {\n                    var part = unitPatternParts_1[_b];\n                    switch (part) {\n                        case '{0}':\n                            result.push.apply(result, numberParts);\n                            break;\n                        case '{1}':\n                            result.push({ type: 'currency', value: unitName });\n                            break;\n                        default:\n                            if (part) {\n                                result.push({ type: 'literal', value: part });\n                            }\n                            break;\n                    }\n                }\n                return result;\n            }\n            else {\n                return numberParts;\n            }\n        }\n        case 'unit': {\n            var unit = options.unit, unitDisplay = options.unitDisplay;\n            var unitData = data.units.simple[unit];\n            var unitPattern = void 0;\n            if (unitData) {\n                // Simple unit pattern\n                unitPattern = selectPlural(pl, numberResult.roundedNumber\n                    .times(Decimal.pow(10, exponent))\n                    .toNumber(), data.units.simple[unit][unitDisplay]);\n            }\n            else {\n                // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns\n                // If cannot find unit in the simple pattern, it must be \"per\" compound pattern.\n                // Implementation note: we are not following TR-35 here because we need to format to parts!\n                var _c = unit.split('-per-'), numeratorUnit = _c[0], denominatorUnit = _c[1];\n                unitData = data.units.simple[numeratorUnit];\n                var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber\n                    .times(Decimal.pow(10, exponent))\n                    .toNumber(), data.units.simple[numeratorUnit][unitDisplay]);\n                var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];\n                if (perUnitPattern) {\n                    // perUnitPattern exists, combine it with numeratorUnitPattern\n                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);\n                }\n                else {\n                    // get compoundUnit pattern (e.g. \"{0} per {1}\"), repalce {0} with numerator pattern and {1} with\n                    // the denominator pattern in singular form.\n                    var perPattern = data.units.compound.per[unitDisplay];\n                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);\n                    unitPattern = unitPattern = perPattern\n                        .replace('{0}', numeratorUnitPattern)\n                        .replace('{1}', denominatorPattern.replace('{0}', ''));\n                }\n            }\n            var result = [];\n            // We need spacing around \"{0}\" because they are not treated as \"unit\" parts, but \"literal\".\n            for (var _d = 0, _e = unitPattern.split(/(\\s*\\{0\\}\\s*)/); _d < _e.length; _d++) {\n                var part = _e[_d];\n                var interpolateMatch = /^(\\s*)\\{0\\}(\\s*)$/.exec(part);\n                if (interpolateMatch) {\n                    // Space before \"{0}\"\n                    if (interpolateMatch[1]) {\n                        result.push({ type: 'literal', value: interpolateMatch[1] });\n                    }\n                    // \"{0}\" itself\n                    result.push.apply(result, numberParts);\n                    // Space after \"{0}\"\n                    if (interpolateMatch[2]) {\n                        result.push({ type: 'literal', value: interpolateMatch[2] });\n                    }\n                }\n                else if (part) {\n                    result.push({ type: 'unit', value: part });\n                }\n            }\n            return result;\n        }\n        default:\n            return numberParts;\n    }\n    // #endregion\n}\n// A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern\n// Plus the exponent parts handling.\nfunction partitionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping, \n/**\n * This is the decimal number pattern without signs or symbols.\n * It is used to infer the group size when `useGrouping` is true.\n *\n * A typical value looks like \"#,##0.00\" (primary group size is 3).\n * Some locales like Hindi has secondary group size of 2 (e.g. \"#,##,##0.00\").\n */\ndecimalNumberPattern, style, roundingIncrement, unsignedRoundingMode) {\n    var result = [];\n    // eslint-disable-next-line prefer-const\n    var n = numberResult.formattedString, x = numberResult.roundedNumber;\n    if (x.isNaN()) {\n        return [{ type: 'nan', value: n }];\n    }\n    else if (!x.isFinite()) {\n        return [{ type: 'infinity', value: n }];\n    }\n    var digitReplacementTable = digitMapping[numberingSystem];\n    if (digitReplacementTable) {\n        n = n.replace(/\\d/g, function (digit) { return digitReplacementTable[+digit] || digit; });\n    }\n    // TODO: Else use an implementation dependent algorithm to map n to the appropriate\n    // representation of n in the given numbering system.\n    var decimalSepIndex = n.indexOf('.');\n    var integer;\n    var fraction;\n    if (decimalSepIndex > 0) {\n        integer = n.slice(0, decimalSepIndex);\n        fraction = n.slice(decimalSepIndex + 1);\n    }\n    else {\n        integer = n;\n    }\n    // #region Grouping integer digits\n    // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.\n    // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator\n    // unless the rounded number is greater than 10000:\n    //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> \"1234\"\n    //   NumberFormat('de').format(1234) //=> \"1.234\"\n    var shouldUseGrouping = false;\n    if (useGrouping === 'always') {\n        shouldUseGrouping = true;\n    }\n    else if (useGrouping === 'min2') {\n        shouldUseGrouping = x.greaterThanOrEqualTo(10000);\n    }\n    else if (useGrouping === 'auto' || useGrouping) {\n        shouldUseGrouping = notation !== 'compact' || x.greaterThanOrEqualTo(10000);\n    }\n    if (shouldUseGrouping) {\n        // a. Let groupSepSymbol be the implementation-, locale-, and numbering system-dependent (ILND) String representing the grouping separator.\n        // For currency we should use `currencyGroup` instead of generic `group`\n        var groupSepSymbol = style === 'currency' && symbols.currencyGroup != null\n            ? symbols.currencyGroup\n            : symbols.group;\n        var groups = [];\n        // > There may be two different grouping sizes: The primary grouping size used for the least\n        // > significant integer group, and the secondary grouping size used for more significant groups.\n        // > If a pattern contains multiple grouping separators, the interval between the last one and the\n        // > end of the integer defines the primary grouping size, and the interval between the last two\n        // > defines the secondary grouping size. All others are ignored.\n        var integerNumberPattern = decimalNumberPattern.split('.')[0];\n        var patternGroups = integerNumberPattern.split(',');\n        var primaryGroupingSize = 3;\n        var secondaryGroupingSize = 3;\n        if (patternGroups.length > 1) {\n            primaryGroupingSize = patternGroups[patternGroups.length - 1].length;\n        }\n        if (patternGroups.length > 2) {\n            secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;\n        }\n        var i = integer.length - primaryGroupingSize;\n        if (i > 0) {\n            // Slice the least significant integer group\n            groups.push(integer.slice(i, i + primaryGroupingSize));\n            // Then iteratively push the more signicant groups\n            // TODO: handle surrogate pairs in some numbering system digits\n            for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {\n                groups.push(integer.slice(i, i + secondaryGroupingSize));\n            }\n            groups.push(integer.slice(0, i + secondaryGroupingSize));\n        }\n        else {\n            groups.push(integer);\n        }\n        while (groups.length > 0) {\n            var integerGroup = groups.pop();\n            result.push({ type: 'integer', value: integerGroup });\n            if (groups.length > 0) {\n                result.push({ type: 'group', value: groupSepSymbol });\n            }\n        }\n    }\n    else {\n        result.push({ type: 'integer', value: integer });\n    }\n    // #endregion\n    if (fraction !== undefined) {\n        var decimalSepSymbol = style === 'currency' && symbols.currencyDecimal != null\n            ? symbols.currencyDecimal\n            : symbols.decimal;\n        result.push({ type: 'decimal', value: decimalSepSymbol }, { type: 'fraction', value: fraction });\n    }\n    if ((notation === 'scientific' || notation === 'engineering') &&\n        x.isFinite()) {\n        result.push({ type: 'exponentSeparator', value: symbols.exponential });\n        if (exponent < 0) {\n            result.push({ type: 'exponentMinusSign', value: symbols.minusSign });\n            exponent = -exponent;\n        }\n        var exponentResult = ToRawFixed(new Decimal(exponent), 0, 0, roundingIncrement, unsignedRoundingMode);\n        result.push({\n            type: 'exponentInteger',\n            value: exponentResult.formattedString,\n        });\n    }\n    return result;\n}\nfunction getPatternForSign(pattern, sign) {\n    if (pattern.indexOf(';') < 0) {\n        pattern = \"\".concat(pattern, \";-\").concat(pattern);\n    }\n    var _a = pattern.split(';'), zeroPattern = _a[0], negativePattern = _a[1];\n    switch (sign) {\n        case 0:\n            return zeroPattern;\n        case -1:\n            return negativePattern;\n        default:\n            return negativePattern.indexOf('-') >= 0\n                ? negativePattern.replace(/-/g, '+')\n                : \"+\".concat(zeroPattern);\n    }\n}\n// Find the CLDR pattern for compact notation based on the magnitude of data and style.\n//\n// Example return value: \"¤ {c:laki}000;¤{c:laki} -0\" (`sw` locale):\n// - Notice the `{c:...}` token that wraps the compact literal.\n// - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.\n//\n// Returning null means the compact display pattern cannot be found.\nfunction getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {\n    var _a;\n    var roundedNumber = numberResult.roundedNumber, sign = numberResult.sign, magnitude = numberResult.magnitude;\n    var magnitudeKey = String(Math.pow(10, magnitude));\n    var defaultNumberingSystem = data.numbers.nu[0];\n    var pattern;\n    if (style === 'currency' && currencyDisplay !== 'name') {\n        var byNumberingSystem = data.numbers.currency;\n        var currencyData = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        // NOTE: compact notation ignores currencySign!\n        var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];\n        if (!compactPluralRules) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber.toNumber(), compactPluralRules);\n    }\n    else {\n        var byNumberingSystem = data.numbers.decimal;\n        var byCompactDisplay = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];\n        if (!compactPlaralRule) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber.toNumber(), compactPlaralRule);\n    }\n    // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n    // > If the value is precisely “0”, either explicit or defaulted, then the normal number format\n    // > pattern for that sort of object is supplied.\n    if (pattern === '0') {\n        return null;\n    }\n    pattern = getPatternForSign(pattern, sign)\n        // Extract compact literal from the pattern\n        .replace(/([^\\s;\\-\\+\\d¤]+)/g, '{c:$1}')\n        // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.\n        .replace(/0+/, '0');\n    return pattern;\n}\nfunction selectPlural(pl, x, rules) {\n    return rules[pl.select(x)] || rules.other;\n}\n", "/**\n * https://tc39.es/ecma402/#sec-formatapproximately\n */\nexport function FormatApproximately(internalSlots, result) {\n    var symbols = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem];\n    var approximatelySign = symbols.approximatelySign;\n    result.push({ type: 'approximatelySign', value: approximatelySign });\n    return result;\n}\n", "import Decimal from 'decimal.js';\nimport { invariant } from '../utils';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\nimport { FormatNumericToString } from './FormatNumericToString';\n/**\n * https://tc39.es/ecma402/#sec-partitionnumberpattern\n */\nexport function PartitionNumberPattern(internalSlots, _x) {\n    var _a;\n    var x = _x;\n    // IMPL: We need to record the magnitude of the number\n    var magnitude = 0;\n    // 2. Let dataLocaleData be internalSlots.[[dataLocaleData]].\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    // 3. Let symbols be dataLocaleData.[[numbers]].[[symbols]][internalSlots.[[numberingSystem]]].\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    // 4. Let exponent be 0.\n    var exponent = 0;\n    // 5. Let n be ! ToString(x).\n    var n;\n    // 6. If x is NaN, then\n    if (x.isNaN()) {\n        // 6.a. Let n be symbols.[[nan]].\n        n = symbols.nan;\n    }\n    else if (!x.isFinite()) {\n        // 7. Else if x is a non-finite Number, then\n        // 7.a. Let n be symbols.[[infinity]].\n        n = symbols.infinity;\n    }\n    else {\n        // 8. Else,\n        if (!x.isZero()) {\n            // 8.a. If x < 0, let x be -x.\n            invariant(x.isFinite(), 'Input must be a mathematical value');\n            // 8.b. If internalSlots.[[style]] is \"percent\", let x be 100 × x.\n            if (internalSlots.style == 'percent') {\n                x = x.times(100);\n            }\n            // 8.c. Let exponent be ComputeExponent(numberFormat, x).\n            ;\n            _a = ComputeExponent(internalSlots, x), exponent = _a[0], \n            // IMPL: We need to record the magnitude of the number\n            magnitude = _a[1];\n            // 8.d. Let x be x × 10^(-exponent).\n            x = x.times(Decimal.pow(10, -exponent));\n        }\n        // 8.e. Let formatNumberResult be FormatNumericToString(internalSlots, x).\n        var formatNumberResult = FormatNumericToString(internalSlots, x);\n        // 8.f. Let n be formatNumberResult.[[formattedString]].\n        n = formatNumberResult.formattedString;\n        // 8.g. Let x be formatNumberResult.[[roundedNumber]].\n        x = formatNumberResult.roundedNumber;\n    }\n    // 9. Let sign be 0.\n    var sign;\n    // 10. If x is negative, then\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            // 10.a. If internalSlots.[[signDisplay]] is \"never\", then\n            // 10.a.i. Let sign be 0.\n            sign = 0;\n            break;\n        case 'auto':\n            // 10.b. Else if internalSlots.[[signDisplay]] is \"auto\", then\n            if (x.isPositive() || x.isNaN()) {\n                // 10.b.i. If x is positive or x is NaN, let sign be 0.\n                sign = 0;\n            }\n            else {\n                // 10.b.ii. Else, let sign be -1.\n                sign = -1;\n            }\n            break;\n        case 'always':\n            // 10.c. Else if internalSlots.[[signDisplay]] is \"always\", then\n            if (x.isPositive() || x.isNaN()) {\n                // 10.c.i. If x is positive or x is NaN, let sign be 1.\n                sign = 1;\n            }\n            else {\n                // 10.c.ii. Else, let sign be -1.\n                sign = -1;\n            }\n            break;\n        case 'exceptZero':\n            // 10.d. Else if internalSlots.[[signDisplay]] is \"exceptZero\", then\n            if (x.isZero()) {\n                // 10.d.i. If x is 0, let sign be 0.\n                sign = 0;\n            }\n            else if (x.isNegative()) {\n                // 10.d.ii. Else if x is negative, let sign be -1.\n                sign = -1;\n            }\n            else {\n                // 10.d.iii. Else, let sign be 1.\n                sign = 1;\n            }\n            break;\n        default:\n            // 10.e. Else,\n            invariant(signDisplay === 'negative', 'signDisplay must be \"negative\"');\n            if (x.isNegative() && !x.isZero()) {\n                // 10.e.i. If x is negative and x is not 0, let sign be -1.\n                sign = -1;\n            }\n            else {\n                // 10.e.ii. Else, let sign be 0.\n                sign = 0;\n            }\n            break;\n    }\n    // 11. Return ? FormatNumberToParts(numberFormat, x, n, exponent, sign).\n    return formatToParts({\n        roundedNumber: x,\n        formattedString: n,\n        exponent: exponent,\n        // IMPL: We're returning this for our implementation of formatToParts\n        magnitude: magnitude,\n        sign: sign,\n    }, internalSlots.dataLocaleData, pl, internalSlots);\n}\n", "import { PartitionNumberPattern } from './PartitionNumberPattern';\nexport function FormatNumeric(internalSlots, x) {\n    var parts = PartitionNumberPattern(internalSlots, x);\n    return parts.map(function (p) { return p.value; }).join('');\n}\n", "import { invariant } from '../utils';\nimport { CollapseNumberRange } from './CollapseNumberRange';\nimport { FormatApproximately } from './FormatApproximately';\nimport { FormatNumeric } from './FormatNumeric';\nimport { PartitionNumberPattern } from './PartitionNumberPattern';\n/**\n * https://tc39.es/ecma402/#sec-partitionnumberrangepattern\n */\nexport function PartitionNumberRangePattern(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    // 1. Assert: x and y are both mathematical values.\n    invariant(!x.isNaN() && !y.isNaN(), 'Input must be a number', RangeError);\n    var internalSlots = getInternalSlots(numberFormat);\n    // 3. Let xResult be ? PartitionNumberPattern(numberFormat, x).\n    var xResult = PartitionNumberPattern(internalSlots, x);\n    // 4. Let yResult be ? PartitionNumberPattern(numberFormat, y).\n    var yResult = PartitionNumberPattern(internalSlots, y);\n    if (FormatNumeric(internalSlots, x) === FormatNumeric(internalSlots, y)) {\n        var appxResult = FormatApproximately(internalSlots, xResult);\n        appxResult.forEach(function (el) {\n            el.source = 'shared';\n        });\n        return appxResult;\n    }\n    var result = [];\n    xResult.forEach(function (el) {\n        el.source = 'startRange';\n        result.push(el);\n    });\n    // 9. Let symbols be internalSlots.[[dataLocaleData]].[[numbers]].[[symbols]][internalSlots.[[numberingSystem]]].\n    var rangeSeparator = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem]\n        .rangeSign;\n    result.push({ type: 'literal', value: rangeSeparator, source: 'shared' });\n    yResult.forEach(function (el) {\n        el.source = 'endRange';\n        result.push(el);\n    });\n    // 13. Return ? CollapseNumberRange(numberFormat, result).\n    return CollapseNumberRange(numberFormat, result, { getInternalSlots: getInternalSlots });\n}\n", "import { PartitionNumberRangePattern } from './PartitionNumberRangePattern';\n/**\n * https://tc39.es/ecma402/#sec-formatnumericrange\n */\nexport function FormatNumericRange(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var parts = PartitionNumberRangePattern(numberFormat, x, y, {\n        getInternalSlots: getInternalSlots,\n    });\n    return parts.map(function (part) { return part.value; }).join('');\n}\n", "import { PartitionNumberRangePattern } from './PartitionNumberRangePattern';\n/**\n * https://tc39.es/ecma402/#sec-formatnumericrangetoparts\n */\nexport function FormatNumericRangeToParts(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var parts = PartitionNumberRangePattern(numberFormat, x, y, {\n        getInternalSlots: getInternalSlots,\n    });\n    return parts.map(function (part, index) { return ({\n        type: part.type,\n        value: part.value,\n        source: part.source,\n        result: index.toString(),\n    }); });\n}\n", "import { ArrayCreate } from '../262';\nimport { PartitionNumberPattern } from './PartitionNumberPattern';\nexport function FormatNumericToParts(nf, x, implDetails) {\n    var parts = PartitionNumberPattern(implDetails.getInternalSlots(nf), x);\n    var result = ArrayCreate(0);\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result.push({\n            type: part.type,\n            value: part.value,\n        });\n    }\n    return result;\n}\n", "import { DefaultNumberOption } from '../DefaultNumberOption';\nimport { GetNumberOption } from '../GetNumberOption';\nimport { GetOption } from '../GetOption';\nimport { invariant } from '../utils';\n//IMPL: Valid rounding increments as per implementation\nvar VALID_ROUNDING_INCREMENTS = new Set([\n    1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000,\n]);\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\nexport function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n    // 1. Let mnid be ? GetNumberOption(opts, \"minimumIntegerDigits\", 1, 21, 1).\n    var mnid = GetNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n    // 2. Let mnfd be opts.[[MinimumFractionDigits]].\n    var mnfd = opts.minimumFractionDigits;\n    // 3. Let mxfd be opts.[[MaximumFractionDigits]].\n    var mxfd = opts.maximumFractionDigits;\n    // 4. Let mnsd be opts.[[MinimumSignificantDigits]].\n    var mnsd = opts.minimumSignificantDigits;\n    // 5. Let mxsd be opts.[[MaximumSignificantDigits]].\n    var mxsd = opts.maximumSignificantDigits;\n    // 6. Set internalSlots.[[MinimumIntegerDigits]] to mnid.\n    internalSlots.minimumIntegerDigits = mnid;\n    // 7. Let roundingIncrement be ? GetNumberOption(opts, \"roundingIncrement\", 1, 5000, 1).\n    var roundingIncrement = GetNumberOption(opts, 'roundingIncrement', 1, 5000, 1);\n    // 8. If roundingIncrement is not an element of the list {1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000}, throw a RangeError exception.\n    invariant(VALID_ROUNDING_INCREMENTS.has(roundingIncrement), \"Invalid rounding increment value: \".concat(roundingIncrement, \".\\nValid values are \").concat(Array.from(VALID_ROUNDING_INCREMENTS).join(', '), \".\"));\n    // 9. Let roundingMode be ? GetOption(opts, \"roundingMode\", \"string\", « \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", \"halfEven\" », \"halfExpand\").\n    var roundingMode = GetOption(opts, 'roundingMode', 'string', [\n        'ceil',\n        'floor',\n        'expand',\n        'trunc',\n        'halfCeil',\n        'halfFloor',\n        'halfExpand',\n        'halfTrunc',\n        'halfEven',\n    ], 'halfExpand');\n    // 10. Let roundingPriority be ? GetOption(opts, \"roundingPriority\", \"string\", « \"auto\", \"morePrecision\", \"lessPrecision\" », \"auto\").\n    var roundingPriority = GetOption(opts, 'roundingPriority', 'string', ['auto', 'morePrecision', 'lessPrecision'], 'auto');\n    // 11. Let trailingZeroDisplay be ? GetOption(opts, \"trailingZeroDisplay\", \"string\", « \"auto\", \"stripIfInteger\" », \"auto\").\n    var trailingZeroDisplay = GetOption(opts, 'trailingZeroDisplay', 'string', ['auto', 'stripIfInteger'], 'auto');\n    // 12. If roundingIncrement is not 1, then\n    if (roundingIncrement !== 1) {\n        // 12.a. Set mxfdDefault to mnfdDefault.\n        mxfdDefault = mnfdDefault;\n    }\n    // 13. Set internalSlots.[[RoundingIncrement]] to roundingIncrement.\n    internalSlots.roundingIncrement = roundingIncrement;\n    // 14. Set internalSlots.[[RoundingMode]] to roundingMode.\n    internalSlots.roundingMode = roundingMode;\n    // 15. Set internalSlots.[[TrailingZeroDisplay]] to trailingZeroDisplay.\n    internalSlots.trailingZeroDisplay = trailingZeroDisplay;\n    // 16. Let hasSd be true if mnsd is not undefined or mxsd is not undefined; otherwise, let hasSd be false.\n    var hasSd = mnsd !== undefined || mxsd !== undefined;\n    // 17. Let hasFd be true if mnfd is not undefined or mxfd is not undefined; otherwise, let hasFd be false.\n    var hasFd = mnfd !== undefined || mxfd !== undefined;\n    // 18. Let needSd be true.\n    var needSd = true;\n    // 19. Let needFd be true.\n    var needFd = true;\n    // 20. If roundingPriority is \"auto\", then\n    if (roundingPriority === 'auto') {\n        // 20.a. Set needSd to hasSd.\n        needSd = hasSd;\n        // 20.b. If hasSd is true or hasFd is false and notation is \"compact\", then\n        if (hasSd || (!hasFd && notation === 'compact')) {\n            // 20.b.i. Set needFd to false.\n            needFd = false;\n        }\n    }\n    // 21. If needSd is true, then\n    if (needSd) {\n        // 21.a. If hasSd is true, then\n        if (hasSd) {\n            // 21.a.i. Set internalSlots.[[MinimumSignificantDigits]] to ? DefaultNumberOption(mnsd, 1, 21, 1).\n            internalSlots.minimumSignificantDigits = DefaultNumberOption(mnsd, 1, 21, 1);\n            // 21.a.ii. Set internalSlots.[[MaximumSignificantDigits]] to ? DefaultNumberOption(mxsd, internalSlots.[[MinimumSignificantDigits]], 21, 21).\n            internalSlots.maximumSignificantDigits = DefaultNumberOption(mxsd, internalSlots.minimumSignificantDigits, 21, 21);\n        }\n        else {\n            // 21.b. Else,\n            // 21.b.i. Set internalSlots.[[MinimumSignificantDigits]] to 1.\n            internalSlots.minimumSignificantDigits = 1;\n            // 21.b.ii. Set internalSlots.[[MaximumSignificantDigits]] to 21.\n            internalSlots.maximumSignificantDigits = 21;\n        }\n    }\n    // 22. If needFd is true, then\n    if (needFd) {\n        // 22.a. If hasFd is true, then\n        if (hasFd) {\n            // 22.a.i. Set mnfd to ? DefaultNumberOption(mnfd, 0, 100, undefined).\n            mnfd = DefaultNumberOption(mnfd, 0, 100, undefined);\n            // 22.a.ii. Set mxfd to ? DefaultNumberOption(mxfd, 0, 100, undefined).\n            mxfd = DefaultNumberOption(mxfd, 0, 100, undefined);\n            // 22.a.iii. If mnfd is undefined, then\n            if (mnfd === undefined) {\n                // 22.a.iii.1. Assert: mxfd is not undefined.\n                invariant(mxfd !== undefined, 'maximumFractionDigits must be defined');\n                // 22.a.iii.2. Set mnfd to min(mnfdDefault, mxfd).\n                mnfd = Math.min(mnfdDefault, mxfd);\n            }\n            else if (mxfd === undefined) {\n                // 22.a.iv. Else if mxfd is undefined, then\n                // 22.a.iv.1. Set mxfd to max(mxfdDefault, mnfd).\n                mxfd = Math.max(mxfdDefault, mnfd);\n            }\n            else if (mnfd > mxfd) {\n                // 22.a.v. Else if mnfd > mxfd, throw a RangeError exception.\n                throw new RangeError(\"Invalid range, \".concat(mnfd, \" > \").concat(mxfd));\n            }\n            // 22.a.vi. Set internalSlots.[[MinimumFractionDigits]] to mnfd.\n            internalSlots.minimumFractionDigits = mnfd;\n            // 22.a.vii. Set internalSlots.[[MaximumFractionDigits]] to mxfd.\n            internalSlots.maximumFractionDigits = mxfd;\n        }\n        else {\n            // 22.b. Else,\n            // 22.b.i. Set internalSlots.[[MinimumFractionDigits]] to mnfdDefault.\n            internalSlots.minimumFractionDigits = mnfdDefault;\n            // 22.b.ii. Set internalSlots.[[MaximumFractionDigits]] to mxfdDefault.\n            internalSlots.maximumFractionDigits = mxfdDefault;\n        }\n    }\n    // 23. If needSd is false and needFd is false, then\n    if (!needSd && !needFd) {\n        // 23.a. Set internalSlots.[[MinimumFractionDigits]] to 0.\n        internalSlots.minimumFractionDigits = 0;\n        // 23.b. Set internalSlots.[[MaximumFractionDigits]] to 0.\n        internalSlots.maximumFractionDigits = 0;\n        // 23.c. Set internalSlots.[[MinimumSignificantDigits]] to 1.\n        internalSlots.minimumSignificantDigits = 1;\n        // 23.d. Set internalSlots.[[MaximumSignificantDigits]] to 2.\n        internalSlots.maximumSignificantDigits = 2;\n        // 23.e. Set internalSlots.[[RoundingType]] to \"morePrecision\".\n        internalSlots.roundingType = 'morePrecision';\n        // 23.f. Set internalSlots.[[RoundingPriority]] to \"morePrecision\".\n        internalSlots.roundingPriority = 'morePrecision';\n    }\n    else if (roundingPriority === 'morePrecision') {\n        // 24. Else if roundingPriority is \"morePrecision\", then\n        // 24.a. Set internalSlots.[[RoundingType]] to \"morePrecision\".\n        internalSlots.roundingType = 'morePrecision';\n        // 24.b. Set internalSlots.[[RoundingPriority]] to \"morePrecision\".\n        internalSlots.roundingPriority = 'morePrecision';\n    }\n    else if (roundingPriority === 'lessPrecision') {\n        // 25. Else if roundingPriority is \"lessPrecision\", then\n        // 25.a. Set internalSlots.[[RoundingType]] to \"lessPrecision\".\n        internalSlots.roundingType = 'lessPrecision';\n        // 25.b. Set internalSlots.[[RoundingPriority]] to \"lessPrecision\".\n        internalSlots.roundingPriority = 'lessPrecision';\n    }\n    else if (hasSd) {\n        // 26. Else if hasSd is true, then\n        // 26.a. Set internalSlots.[[RoundingType]] to \"significantDigits\".\n        internalSlots.roundingType = 'significantDigits';\n        // 26.b. Set internalSlots.[[RoundingPriority]] to \"auto\".\n        internalSlots.roundingPriority = 'auto';\n    }\n    else {\n        // 27. Else,\n        // 27.a. Set internalSlots.[[RoundingType]] to \"fractionDigits\".\n        internalSlots.roundingType = 'fractionDigits';\n        // 27.b. Set internalSlots.[[RoundingPriority]] to \"auto\".\n        internalSlots.roundingPriority = 'auto';\n    }\n    // 28. If roundingIncrement is not 1, then\n    if (roundingIncrement !== 1) {\n        // 28.a. Assert: internalSlots.[[RoundingType]] is \"fractionDigits\".\n        invariant(internalSlots.roundingType === 'fractionDigits', 'Invalid roundingType', TypeError);\n        // 28.b. Assert: internalSlots.[[MaximumFractionDigits]] is equal to internalSlots.[[MinimumFractionDigits]].\n        invariant(internalSlots.maximumFractionDigits ===\n            internalSlots.minimumFractionDigits, 'With roundingIncrement > 1, maximumFractionDigits and minimumFractionDigits must be equal.', RangeError);\n    }\n}\n", "import { GetOption } from '../GetOption';\nimport { IsWellFormedCurrencyCode } from '../IsWellFormedCurrencyCode';\nimport { IsWellFormedUnitIdentifier } from '../IsWellFormedUnitIdentifier';\nimport { invariant } from '../utils';\n/**\n * https://tc39.es/ecma402/#sec-setnumberformatunitoptions\n */\nexport function SetNumberFormatUnitOptions(internalSlots, options) {\n    if (options === void 0) { options = Object.create(null); }\n    // 1. Let style be ? GetOption(options, \"style\", \"string\", « \"decimal\", \"percent\", \"currency\", \"unit\" », \"decimal\").\n    var style = GetOption(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');\n    // 2. Set internalSlots.[[Style]] to style.\n    internalSlots.style = style;\n    // 3. Let currency be ? GetOption(options, \"currency\", \"string\", undefined, undefined).\n    var currency = GetOption(options, 'currency', 'string', undefined, undefined);\n    // 4. If currency is not undefined, then\n    // a. If the result of IsWellFormedCurrencyCode(currency) is false, throw a RangeError exception.\n    invariant(currency === undefined || IsWellFormedCurrencyCode(currency), 'Malformed currency code', RangeError);\n    // 5. If style is \"currency\" and currency is undefined, throw a TypeError exception.\n    invariant(style !== 'currency' || currency !== undefined, 'currency cannot be undefined', TypeError);\n    // 6. Let currencyDisplay be ? GetOption(options, \"currencyDisplay\", \"string\", « \"code\", \"symbol\", \"narrowSymbol\", \"name\" », \"symbol\").\n    var currencyDisplay = GetOption(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');\n    // 7. Let currencySign be ? GetOption(options, \"currencySign\", \"string\", « \"standard\", \"accounting\" », \"standard\").\n    var currencySign = GetOption(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');\n    // 8. Let unit be ? GetOption(options, \"unit\", \"string\", undefined, undefined).\n    var unit = GetOption(options, 'unit', 'string', undefined, undefined);\n    // 9. If unit is not undefined, then\n    // a. If the result of IsWellFormedUnitIdentifier(unit) is false, throw a RangeError exception.\n    invariant(unit === undefined || IsWellFormedUnitIdentifier(unit), 'Invalid unit argument for Intl.NumberFormat()', RangeError);\n    // 10. If style is \"unit\" and unit is undefined, throw a TypeError exception.\n    invariant(style !== 'unit' || unit !== undefined, 'unit cannot be undefined', TypeError);\n    // 11. Let unitDisplay be ? GetOption(options, \"unitDisplay\", \"string\", « \"short\", \"narrow\", \"long\" », \"short\").\n    var unitDisplay = GetOption(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');\n    // 12. If style is \"currency\", then\n    if (style === 'currency') {\n        // a. Set internalSlots.[[Currency]] to the result of converting currency to upper case as specified in 6.1.\n        internalSlots.currency = currency.toUpperCase();\n        // b. Set internalSlots.[[CurrencyDisplay]] to currencyDisplay.\n        internalSlots.currencyDisplay = currencyDisplay;\n        // c. Set internalSlots.[[CurrencySign]] to currencySign.\n        internalSlots.currencySign = currencySign;\n    }\n    // 13. If style is \"unit\", then\n    if (style === 'unit') {\n        // a. Set internalSlots.[[Unit]] to unit.\n        internalSlots.unit = unit;\n        // b. Set internalSlots.[[UnitDisplay]] to unitDisplay.\n        internalSlots.unitDisplay = unitDisplay;\n    }\n}\n", "import { ResolveLocale } from '@formatjs/intl-localematcher';\nimport { CanonicalizeLocaleList } from '../CanonicalizeLocaleList';\nimport { CoerceOptionsToObject } from '../CoerceOptionsToObject';\nimport { GetOption } from '../GetOption';\nimport { GetStringOrBooleanOption } from '../GetStringOrBooleanOption';\nimport { invariant } from '../utils';\nimport { CurrencyDigits } from './CurrencyDigits';\nimport { SetNumberFormatDigitOptions } from './SetNumberFormatDigitOptions';\nimport { SetNumberFormatUnitOptions } from './SetNumberFormatUnitOptions';\n/**\n * https://tc39.es/ecma402/#sec-initializenumberformat\n */\nexport function InitializeNumberFormat(nf, locales, opts, _a) {\n    var getInternalSlots = _a.getInternalSlots, localeData = _a.localeData, availableLocales = _a.availableLocales, numberingSystemNames = _a.numberingSystemNames, getDefaultLocale = _a.getDefaultLocale, currencyDigitsData = _a.currencyDigitsData;\n    var requestedLocales = CanonicalizeLocaleList(locales);\n    var options = CoerceOptionsToObject(opts);\n    var opt = Object.create(null);\n    var matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    opt.localeMatcher = matcher;\n    var numberingSystem = GetOption(options, 'numberingSystem', 'string', undefined, undefined);\n    if (numberingSystem !== undefined &&\n        numberingSystemNames.indexOf(numberingSystem) < 0) {\n        // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,\n        // throw a RangeError exception.\n        throw RangeError(\"Invalid numberingSystems: \".concat(numberingSystem));\n    }\n    opt.nu = numberingSystem;\n    var r = ResolveLocale(Array.from(availableLocales), requestedLocales, opt, \n    // [[RelevantExtensionKeys]] slot, which is a constant\n    ['nu'], localeData, getDefaultLocale);\n    var dataLocaleData = localeData[r.dataLocale];\n    invariant(!!dataLocaleData, \"Missing locale data for \".concat(r.dataLocale));\n    var internalSlots = getInternalSlots(nf);\n    internalSlots.locale = r.locale;\n    internalSlots.dataLocale = r.dataLocale;\n    internalSlots.numberingSystem = r.nu;\n    internalSlots.dataLocaleData = dataLocaleData;\n    SetNumberFormatUnitOptions(internalSlots, options);\n    var style = internalSlots.style;\n    var notation = GetOption(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');\n    internalSlots.notation = notation;\n    var mnfdDefault;\n    var mxfdDefault;\n    if (style === 'currency' && notation === 'standard') {\n        var currency = internalSlots.currency;\n        var cDigits = CurrencyDigits(currency, { currencyDigitsData: currencyDigitsData });\n        mnfdDefault = cDigits;\n        mxfdDefault = cDigits;\n    }\n    else {\n        mnfdDefault = 0;\n        mxfdDefault = style === 'percent' ? 0 : 3;\n    }\n    SetNumberFormatDigitOptions(internalSlots, options, mnfdDefault, mxfdDefault, notation);\n    var compactDisplay = GetOption(options, 'compactDisplay', 'string', ['short', 'long'], 'short');\n    var defaultUseGrouping = 'auto';\n    if (notation === 'compact') {\n        internalSlots.compactDisplay = compactDisplay;\n        defaultUseGrouping = 'min2';\n    }\n    var useGrouping = GetStringOrBooleanOption(options, 'useGrouping', ['min2', 'auto', 'always'], 'always', false, defaultUseGrouping);\n    internalSlots.useGrouping = useGrouping;\n    var signDisplay = GetOption(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero', 'negative'], 'auto');\n    internalSlots.signDisplay = signDisplay;\n    return nf;\n}\n", "import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\nexport function PartitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n", "import { LookupSupportedLocales } from '@formatjs/intl-localematcher';\nimport { ToObject } from './262';\nimport { GetOption } from './GetOption';\n/**\n * https://tc39.es/ecma402/#sec-supportedlocales\n * @param availableLocales\n * @param requestedLocales\n * @param options\n */\nexport function SupportedLocales(availableLocales, requestedLocales, options) {\n    var matcher = 'best fit';\n    if (options !== undefined) {\n        options = ToObject(options);\n        matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    }\n    if (matcher === 'best fit') {\n        return LookupSupportedLocales(Array.from(availableLocales), requestedLocales);\n    }\n    return LookupSupportedLocales(Array.from(availableLocales), requestedLocales);\n}\n", "import { __extends } from \"tslib\";\nvar MissingLocaleDataError = /** @class */ (function (_super) {\n    __extends(MissingLocaleDataError, _super);\n    function MissingLocaleDataError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'MISSING_LOCALE_DATA';\n        return _this;\n    }\n    return MissingLocaleDataError;\n}(Error));\nexport function isMissingLocaleDataError(e) {\n    return e.type === 'MISSING_LOCALE_DATA';\n}\n", "export var RangePatternType;\n(function (RangePatternType) {\n    RangePatternType[\"startRange\"] = \"startRange\";\n    RangePatternType[\"shared\"] = \"shared\";\n    RangePatternType[\"endRange\"] = \"endRange\";\n})(RangePatternType || (RangePatternType = {}));\n", "export {};\n", "export {};\n", "export {};\n", "export {};\n", "export {};\n", "import Decimal from 'decimal.js';\nimport { ToPrimitive } from './262';\nexport function ToIntlMathematicalValue(input) {\n    var primValue = ToPrimitive(input, 'number');\n    if (typeof primValue === 'bigint') {\n        return new Decimal(primValue);\n    }\n    // IMPL\n    if (primValue === undefined) {\n        return new Decimal(NaN);\n    }\n    if (primValue === true) {\n        return new Decimal(1);\n    }\n    if (primValue === false) {\n        return new Decimal(0);\n    }\n    if (primValue === null) {\n        return new Decimal(0);\n    }\n    try {\n        return new Decimal(primValue);\n    }\n    catch (e) {\n        return new Decimal(NaN);\n    }\n}\n", "export * from './CanonicalizeLocaleList';\nexport * from './CanonicalizeTimeZoneName';\nexport * from './CoerceOptionsToObject';\nexport * from './GetNumberOption';\nexport * from './GetOption';\nexport * from './GetOptionsObject';\nexport * from './GetStringOrBooleanOption';\nexport * from './IsSanctionedSimpleUnitIdentifier';\nexport * from './IsValidTimeZoneName';\nexport * from './IsWellFormedCurrencyCode';\nexport * from './IsWellFormedUnitIdentifier';\nexport * from './NumberFormat/ApplyUnsignedRoundingMode';\nexport * from './NumberFormat/CollapseNumberRange';\nexport * from './NumberFormat/ComputeExponent';\nexport * from './NumberFormat/ComputeExponentForMagnitude';\nexport * from './NumberFormat/CurrencyDigits';\nexport { default as _formatToParts } from './NumberFormat/format_to_parts';\nexport * from './NumberFormat/FormatApproximately';\nexport * from './NumberFormat/FormatNumeric';\nexport * from './NumberFormat/FormatNumericRange';\nexport * from './NumberFormat/FormatNumericRangeToParts';\nexport * from './NumberFormat/FormatNumericToParts';\nexport * from './NumberFormat/FormatNumericToString';\nexport * from './NumberFormat/GetUnsignedRoundingMode';\nexport * from './NumberFormat/InitializeNumberFormat';\nexport * from './NumberFormat/PartitionNumberPattern';\nexport * from './NumberFormat/PartitionNumberRangePattern';\nexport * from './NumberFormat/SetNumberFormatDigitOptions';\nexport * from './NumberFormat/SetNumberFormatUnitOptions';\nexport * from './NumberFormat/ToRawFixed';\nexport * from './NumberFormat/ToRawPrecision';\nexport * from './PartitionPattern';\nexport * from './SupportedLocales';\nexport { createDataProperty, defineProperty, getInternalSlot, getMultiInternalSlots, isLiteralPart, setInternalSlot, setMultiInternalSlots, } from './utils';\nexport * from './262';\nexport { isMissingLocaleDataError } from './data';\nexport * from './types/date-time';\nexport * from './types/displaynames';\nexport * from './types/list';\nexport * from './types/number';\nexport * from './types/plural-rules';\nexport * from './types/relative-time';\nexport { createMemoizedDateTimeFormat, createMemoizedListFormat, createMemoizedLocale, createMemoizedNumberFormat, createMemoizedPluralRules, invariant, } from './utils';\nexport { ZERO } from './constants';\nexport { ToIntlMathematicalValue } from './ToIntlMathematicalValue';\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitializePluralRules = InitializePluralRules;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nfunction InitializePluralRules(pl, locales, options, _a) {\n    var availableLocales = _a.availableLocales, relevantExtensionKeys = _a.relevantExtensionKeys, localeData = _a.localeData, getDefaultLocale = _a.getDefaultLocale, getInternalSlots = _a.getInternalSlots;\n    var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);\n    var opt = Object.create(null);\n    var opts = (0, ecma402_abstract_1.CoerceOptionsToObject)(options);\n    var internalSlots = getInternalSlots(pl);\n    internalSlots.initializedPluralRules = true;\n    var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher;\n    var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);\n    internalSlots.locale = r.locale;\n    internalSlots.type = (0, ecma402_abstract_1.GetOption)(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal');\n    (0, ecma402_abstract_1.SetNumberFormatDigitOptions)(internalSlots, opts, 0, 3, 'standard');\n    return pl;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetOperands = GetOperands;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-getoperands\n * @param s\n */\nfunction GetOperands(s) {\n    (0, ecma402_abstract_1.invariant)(typeof s === 'string', \"GetOperands should have been called with a string\");\n    var n = (0, ecma402_abstract_1.ToNumber)(s);\n    (0, ecma402_abstract_1.invariant)(n.isFinite(), 'n should be finite');\n    var dp = s.indexOf('.');\n    var iv;\n    var f;\n    var v;\n    var fv = '';\n    if (dp === -1) {\n        iv = n;\n        f = ecma402_abstract_1.ZERO;\n        v = 0;\n    }\n    else {\n        iv = s.slice(0, dp);\n        fv = s.slice(dp, s.length);\n        f = (0, ecma402_abstract_1.ToNumber)(fv);\n        v = fv.length;\n    }\n    var i = (0, ecma402_abstract_1.ToNumber)(iv).abs();\n    var w;\n    var t;\n    if (!f.isZero()) {\n        var ft = fv.replace(/0+$/, '');\n        w = ft.length;\n        t = (0, ecma402_abstract_1.ToNumber)(ft);\n    }\n    else {\n        w = 0;\n        t = ecma402_abstract_1.ZERO;\n    }\n    return {\n        Number: n,\n        IntegerDigits: i.toNumber(),\n        NumberOfFractionDigits: v,\n        NumberOfFractionDigitsWithoutTrailing: w,\n        FractionDigits: f.toNumber(),\n        FractionDigitsWithoutTrailing: t.toNumber(),\n    };\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResolvePlural = ResolvePlural;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar GetOperands_1 = require(\"./GetOperands\");\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\nfunction ResolvePlural(pl, n, _a) {\n    var getInternalSlots = _a.getInternalSlots, PluralRuleSelect = _a.PluralRuleSelect;\n    var internalSlots = getInternalSlots(pl);\n    (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(internalSlots) === 'Object', 'pl has to be an object');\n    (0, ecma402_abstract_1.invariant)('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n    if (!n.isFinite()) {\n        return 'other';\n    }\n    var locale = internalSlots.locale, type = internalSlots.type;\n    var res = (0, ecma402_abstract_1.FormatNumericToString)(internalSlots, n);\n    var s = res.formattedString;\n    var operands = (0, GetOperands_1.GetOperands)(s);\n    return PluralRuleSelect(locale, type, n, operands);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = getInternalSlots;\nvar internalSlotMap = new WeakMap();\nfunction getInternalSlots(x) {\n    var internalSlots = internalSlotMap.get(x);\n    if (!internalSlots) {\n        internalSlots = Object.create(null);\n        internalSlotMap.set(x, internalSlots);\n    }\n    return internalSlots;\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PluralRules = void 0;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar InitializePluralRules_1 = require(\"./abstract/InitializePluralRules\");\nvar ResolvePlural_1 = require(\"./abstract/ResolvePlural\");\nvar get_internal_slots_1 = tslib_1.__importDefault(require(\"./get_internal_slots\"));\nfunction validateInstance(instance, method) {\n    if (!(instance instanceof PluralRules)) {\n        throw new TypeError(\"Method Intl.PluralRules.prototype.\".concat(method, \" called on incompatible receiver \").concat(String(instance)));\n    }\n}\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-pluralruleselect\n * @param locale\n * @param type\n * @param _n\n * @param param3\n */\nfunction PluralRuleSelect(locale, type, _n, _a) {\n    var IntegerDigits = _a.IntegerDigits, NumberOfFractionDigits = _a.NumberOfFractionDigits, FractionDigits = _a.FractionDigits;\n    return PluralRules.localeData[locale].fn(NumberOfFractionDigits\n        ? \"\".concat(IntegerDigits, \".\").concat(FractionDigits)\n        : IntegerDigits, type === 'ordinal');\n}\nvar PluralRules = /** @class */ (function () {\n    function PluralRules(locales, options) {\n        // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js\n        // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n        var newTarget = this && this instanceof PluralRules ? this.constructor : void 0;\n        if (!newTarget) {\n            throw new TypeError(\"Intl.PluralRules must be called with 'new'\");\n        }\n        return (0, InitializePluralRules_1.InitializePluralRules)(this, locales, options, {\n            availableLocales: PluralRules.availableLocales,\n            relevantExtensionKeys: PluralRules.relevantExtensionKeys,\n            localeData: PluralRules.localeData,\n            getDefaultLocale: PluralRules.getDefaultLocale,\n            getInternalSlots: get_internal_slots_1.default,\n        });\n    }\n    PluralRules.prototype.resolvedOptions = function () {\n        validateInstance(this, 'resolvedOptions');\n        var opts = Object.create(null);\n        var internalSlots = (0, get_internal_slots_1.default)(this);\n        opts.locale = internalSlots.locale;\n        opts.type = internalSlots.type;\n        [\n            'minimumIntegerDigits',\n            'minimumFractionDigits',\n            'maximumFractionDigits',\n            'minimumSignificantDigits',\n            'maximumSignificantDigits',\n        ].forEach(function (field) {\n            var val = internalSlots[field];\n            if (val !== undefined) {\n                opts[field] = val;\n            }\n        });\n        opts.pluralCategories = tslib_1.__spreadArray([], PluralRules.localeData[opts.locale].categories[opts.type], true);\n        return opts;\n    };\n    PluralRules.prototype.select = function (val) {\n        var pr = this;\n        validateInstance(pr, 'select');\n        var n = (0, ecma402_abstract_1.ToNumber)(val);\n        return (0, ResolvePlural_1.ResolvePlural)(pr, n, { getInternalSlots: get_internal_slots_1.default, PluralRuleSelect: PluralRuleSelect });\n    };\n    PluralRules.prototype.toString = function () {\n        return '[object Intl.PluralRules]';\n    };\n    PluralRules.supportedLocalesOf = function (locales, options) {\n        return (0, ecma402_abstract_1.SupportedLocales)(PluralRules.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);\n    };\n    PluralRules.__addLocaleData = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n            var _b = data_1[_a], d = _b.data, locale = _b.locale;\n            PluralRules.localeData[locale] = d;\n            PluralRules.availableLocales.add(locale);\n            if (!PluralRules.__defaultLocale) {\n                PluralRules.__defaultLocale = locale;\n            }\n        }\n    };\n    PluralRules.getDefaultLocale = function () {\n        return PluralRules.__defaultLocale;\n    };\n    PluralRules.localeData = {};\n    PluralRules.availableLocales = new Set();\n    PluralRules.__defaultLocale = '';\n    PluralRules.relevantExtensionKeys = [];\n    PluralRules.polyfilled = true;\n    return PluralRules;\n}());\nexports.PluralRules = PluralRules;\ntry {\n    // IE11 does not have Symbol\n    if (typeof Symbol !== 'undefined') {\n        Object.defineProperty(PluralRules.prototype, Symbol.toStringTag, {\n            value: 'Intl.PluralRules',\n            writable: false,\n            enumerable: false,\n            configurable: true,\n        });\n    }\n    try {\n        // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js\n        Object.defineProperty(PluralRules, 'length', {\n            value: 0,\n            writable: false,\n            enumerable: false,\n            configurable: true,\n        });\n    }\n    catch (error) {\n        // IE 11 sets Function.prototype.length to be non-configurable which will cause the\n        // above Object.defineProperty to throw an error.\n    }\n    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js\n    Object.defineProperty(PluralRules.prototype.constructor, 'length', {\n        value: 0,\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js\n    Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {\n        value: 1,\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n    Object.defineProperty(PluralRules, 'name', {\n        value: 'PluralRules',\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n}\ncatch (ex) {\n    // Meta fixes for test262\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"./\");\nObject.defineProperty(Intl, 'PluralRules', {\n    value: _1.PluralRules,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n});\n"],
  "mappings": "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QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;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AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAY;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,QAAQ;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;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",
  "names": ["min", "max", "pow", "sum", "Decimal", "i", "sign", "init_lib", "ObjectWithoutPrototypeCache", "init_lib", "mod", "P", "min", "max", "sign", "sign", "sign", "MissingLocaleDataError", "RangePatternType", "lib_exports", "init_lib", "PluralRules"]
}
